apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-14T07:19:14Z"
    generateName: pod-jenkins-deploy-6c8f5b65cb-
    labels:
      app: pod-jenkins-deploy
      pod-template-hash: 6c8f5b65cb
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a74bd5aa-4cf5-417c-9135-10c3c758326a"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"jenkins"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:19:14Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.14"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:24:43Z"
    name: pod-jenkins-deploy-6c8f5b65cb-9j56r
    namespace: blue
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: pod-jenkins-deploy-6c8f5b65cb
      uid: a74bd5aa-4cf5-417c-9135-10c3c758326a
    resourceVersion: "27321063"
    uid: 410ac6d0-7482-40aa-b080-1b0fb6f48395
  spec:
    containers:
    - image: jenkins
      imagePullPolicy: Always
      name: jenkins
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-5s2ln
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-5s2ln
      secret:
        defaultMode: 420
        secretName: default-token-5s2ln
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:14Z"
      message: 'containers with unready status: [jenkins]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:14Z"
      message: 'containers with unready status: [jenkins]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - image: jenkins
      imageID: ""
      lastState: {}
      name: jenkins
      ready: false
      restartCount: 0
      started: false
      state:
        waiting:
          message: Back-off pulling image "jenkins"
          reason: ImagePullBackOff
    hostIP: 10.1.11.9
    phase: Pending
    podIP: 10.32.0.14
    podIPs:
    - ip: 10.32.0.14
    qosClass: BestEffort
    startTime: "2021-01-14T07:19:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-13T04:29:07Z"
    generateName: details-v1-79c697d759-
    labels:
      app: details
      istio.io/rev: default
      pod-template-hash: 79c697d759
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: details
      service.istio.io/canonical-revision: v1
      version: v1
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c72485d4-8b52-4746-a50b-dbed06012549"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"details"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:29:07Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-13T04:30:27Z"
    name: details-v1-79c697d759-85bfd
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: details-v1-79c697d759
      uid: c72485d4-8b52-4746-a50b-dbed06012549
    resourceVersion: "26897225"
    uid: c6dbcdc1-6176-4aad-8788-076c1e910848
  spec:
    containers:
    - image: docker.io/istio/examples-bookinfo-details-v1:1.16.2
      imagePullPolicy: IfNotPresent
      name: details
      ports:
      - containerPort: 9080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-details-token-hgz6s
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - details.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"containerPort":9080,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: details
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: details-v1
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/details-v1
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-details-token-hgz6s
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-details-token-hgz6s
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: bookinfo-details
    serviceAccountName: bookinfo-details
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: bookinfo-details-token-hgz6s
      secret:
        defaultMode: 420
        secretName: bookinfo-details-token-hgz6s
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:29:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:30:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:30:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:29:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://89e209bccb6d14579101653b836444eebbae03cf83ff502f481d73d1fe3d721e
      image: istio/examples-bookinfo-details-v1:1.16.2
      imageID: docker-pullable://istio/examples-bookinfo-details-v1@sha256:18e54f81689035019e1ac78f6d2e6483fcf1d94072d047315ab193cb2ab89ae5
      lastState: {}
      name: details
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T04:29:32Z"
    - containerID: docker://cecf72d1a7d2219e4a8831fcae398ee78d587eb9c96165ba194921709192ece9
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T04:30:24Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://d78666ece738fdecd0bfb22b63f431bc3bdea827b80d9ff768c213bd8886e439
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://d78666ece738fdecd0bfb22b63f431bc3bdea827b80d9ff768c213bd8886e439
          exitCode: 0
          finishedAt: "2021-01-13T04:29:13Z"
          reason: Completed
          startedAt: "2021-01-13T04:29:12Z"
    phase: Running
    podIP: 10.32.0.11
    podIPs:
    - ip: 10.32.0.11
    qosClass: Burstable
    startTime: "2021-01-13T04:29:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.11"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:43:21Z"
    name: http-go-568f649bb-5hjv8
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27206646"
    uid: 9b32fb89-26ab-4f83-8d1b-343eacb89774
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c3aefd118c746c519f8d02dbab7fc0c1c0d1277c3ce1b93e178ce3c5704648a2
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:43:01Z"
    - containerID: docker://957170cbb6ff6bc4bae15e8d10f25c4606554f2934d2591f172268318892837e
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:43:17Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://e25dacc8587ed528ea82caa504c3a21bad4984bc99a102da0f0e44ee3b310bfc
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://e25dacc8587ed528ea82caa504c3a21bad4984bc99a102da0f0e44ee3b310bfc
          exitCode: 0
          finishedAt: "2021-01-14T09:42:38Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:38Z"
    phase: Running
    podIP: 10.38.0.11
    podIPs:
    - ip: 10.38.0.11
    qosClass: Burstable
    startTime: "2021-01-14T09:42:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.6"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:43:12Z"
    name: http-go-568f649bb-764rz
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27206609"
    uid: 24d22e39-0d28-4b30-847a-6688e3ef3336
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4c89e4e2f3caee63b1594536d701f0faeeeec1991efb2c4cd267a4bdc1ace642
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:46Z"
    - containerID: docker://26c8e05d66f7d327aba4e46550d5a2961d44a482df8436e6f308eb3057e1d987
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:43:06Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://5dcaa3841684d930cfe5d73bb0c04da13fc56687d3f28a008dde7d897321b342
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://5dcaa3841684d930cfe5d73bb0c04da13fc56687d3f28a008dde7d897321b342
          exitCode: 0
          finishedAt: "2021-01-14T09:42:24Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:23Z"
    phase: Running
    podIP: 10.38.0.6
    podIPs:
    - ip: 10.38.0.6
    qosClass: Burstable
    startTime: "2021-01-14T09:42:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T07:57:16Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:57:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.22"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T07:57:43Z"
    name: http-go-568f649bb-8bv5v
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27188610"
    uid: 06d0c708-b0c7-4c6f-90fd-b7d901e06644
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f0e46ca852cfd3a4c5d6714e0bf32fa6ccb51a70affa54315ad25c791d72badf
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:57:32Z"
    - containerID: docker://6a831dbb3446b07dc21b41d25a074b8052a355c3cbabd9e59b0a49e929b668fb
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:57:39Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://6cb641791c0f06b447017f93e470cc726436e97e30e6c209c528ec7e33432906
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://6cb641791c0f06b447017f93e470cc726436e97e30e6c209c528ec7e33432906
          exitCode: 0
          finishedAt: "2021-01-14T07:57:24Z"
          reason: Completed
          startedAt: "2021-01-14T07:57:24Z"
    phase: Running
    podIP: 10.32.0.22
    podIPs:
    - ip: 10.32.0.22
    qosClass: Burstable
    startTime: "2021-01-14T07:57:17Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.10"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:43:16Z"
    name: http-go-568f649bb-9ptxm
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27206630"
    uid: eefd18dd-cde6-47a9-bf5f-dc363dc3b2b7
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1ab745135df2e4a66f843baaae2fd090f630555a7c097974d0f99c456d9076d8
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:59Z"
    - containerID: docker://78a77cec9d1715a184638510a0306832c4425bdd0b624fa3e38f0057843f2e27
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:43:13Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://afecf989de6890f9efdfe4b9169c42c42685d4afcd0d4e99ddbd6d84cf41a8a8
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://afecf989de6890f9efdfe4b9169c42c42685d4afcd0d4e99ddbd6d84cf41a8a8
          exitCode: 0
          finishedAt: "2021-01-14T09:42:35Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:35Z"
    phase: Running
    podIP: 10.38.0.10
    podIPs:
    - ip: 10.38.0.10
    qosClass: Burstable
    startTime: "2021-01-14T09:42:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T07:57:17Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:57:17Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.23"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T07:57:44Z"
    name: http-go-568f649bb-c4857
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27188629"
    uid: 6be38237-bb4e-4043-937f-b5b1657168a9
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:17Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0ce34e46dcd97da4fcc5cd87b7e44ac4cbdd99158a200350cdab245d2c6e92eb
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:57:34Z"
    - containerID: docker://708dc87cf66857e7926f4c03cbd79773e7d8c856ab68604c0ba00ea638d77721
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:57:42Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://83c9f63baaa4798c3779da3782e434d055d0c0d30857781606c7d05f24fc5aa6
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://83c9f63baaa4798c3779da3782e434d055d0c0d30857781606c7d05f24fc5aa6
          exitCode: 0
          finishedAt: "2021-01-14T07:57:27Z"
          reason: Completed
          startedAt: "2021-01-14T07:57:27Z"
    phase: Running
    podIP: 10.32.0.23
    podIPs:
    - ip: 10.32.0.23
    qosClass: Burstable
    startTime: "2021-01-14T07:57:17Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:43:12Z"
    name: http-go-568f649bb-fsfqc
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27206612"
    uid: bb5649c4-5d26-42f7-9407-0081d0de06f4
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:26Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b1b84bef556e0959bb6baeb3869ba8efb73057e1f1263c9688b66c85cf8548e3
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:48Z"
    - containerID: docker://e9e9556bb9e76259e6a5b80dce5859886cf8e776174f416f7a23d620ad0a361f
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:43:09Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://395ebb5b150a79553a44f80d86bec570d597dfb6f62813ee01be401ae7ab71e5
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://395ebb5b150a79553a44f80d86bec570d597dfb6f62813ee01be401ae7ab71e5
          exitCode: 0
          finishedAt: "2021-01-14T09:42:25Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:25Z"
    phase: Running
    podIP: 10.38.0.7
    podIPs:
    - ip: 10.38.0.7
    qosClass: Burstable
    startTime: "2021-01-14T09:42:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:09Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:09Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.8"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:43:14Z"
    name: http-go-568f649bb-hbzft
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27206621"
    uid: 8a2bb415-cf91-4239-8c2c-981ab9dfdf47
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8239f8f189f91eed1fed25e964036c10e000666da3e76e935c5d756efd8b6520
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:54Z"
    - containerID: docker://2b08b2ca3f080017ed37d006f457c7839e4b4f203b734d1a09ed135e5573d634
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:43:11Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://8c16876ccfcfecbcdac571744794b4066581a7c3ab244e432bb237eb4cfd296c
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://8c16876ccfcfecbcdac571744794b4066581a7c3ab244e432bb237eb4cfd296c
          exitCode: 0
          finishedAt: "2021-01-14T09:42:30Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:30Z"
    phase: Running
    podIP: 10.38.0.8
    podIPs:
    - ip: 10.38.0.8
    qosClass: Burstable
    startTime: "2021-01-14T09:42:10Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T07:53:20Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:53:20Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.20"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T07:53:40Z"
    name: http-go-568f649bb-j2mqp
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27187656"
    uid: 72a7192a-5e6c-44f3-8f31-33daad16559f
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:40Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:40Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a1d273e401ea184a798aff46a3fba5abe71ef0d05841af071953a8c57337f1df
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:53:33Z"
    - containerID: docker://3bff3b198b87b58779340d91d840d7cf94cd8f4d5847676409ab5b8e171db2e8
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:53:38Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://9575584c9194455d0835c06e439e225cba781b573000111adbfb6128ddf292e5
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://9575584c9194455d0835c06e439e225cba781b573000111adbfb6128ddf292e5
          exitCode: 0
          finishedAt: "2021-01-14T07:53:28Z"
          reason: Completed
          startedAt: "2021-01-14T07:53:28Z"
    phase: Running
    podIP: 10.32.0.20
    podIPs:
    - ip: 10.32.0.20
    qosClass: Burstable
    startTime: "2021-01-14T07:53:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T07:57:16Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:57:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.21"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T07:57:40Z"
    name: http-go-568f649bb-jbnqs
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27188591"
    uid: cf542493-10b8-4a6c-be67-55a7b3a0447b
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:40Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:40Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:57:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://492ea9b039d0ec2a540ef2ba4e63898331092295c5cc7d25f94719fde5d1ec28
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:57:29Z"
    - containerID: docker://5b84b5ed7c47f6496274fd7e76747af2f468c6d58b81b73aff881fc5500e7500
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:57:37Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://d433e25c983e8a57a1a4b0d4b6f1cf50dc1714d90da80535972dcab98cc9c004
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://d433e25c983e8a57a1a4b0d4b6f1cf50dc1714d90da80535972dcab98cc9c004
          exitCode: 0
          finishedAt: "2021-01-14T07:57:22Z"
          reason: Completed
          startedAt: "2021-01-14T07:57:21Z"
    phase: Running
    podIP: 10.32.0.21
    podIPs:
    - ip: 10.32.0.21
    qosClass: Burstable
    startTime: "2021-01-14T07:57:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T07:53:20Z"
    generateName: http-go-568f649bb-
    labels:
      app: http-go
      istio.io/rev: default
      pod-template-hash: 568f649bb
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: http-go
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a8c886a9-47c2-4e95-a4e7-9971bcba2c44"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"http-go"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:53:20Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.19"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T07:53:38Z"
    name: http-go-568f649bb-v4fzb
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: http-go-568f649bb
      uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
    resourceVersion: "27187646"
    uid: 689a564d-00e8-4f4c-b638-6df631f75141
  spec:
    containers:
    - image: gasbugs/http-go
      imagePullPolicy: Always
      name: http-go
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - http-go.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: http-go
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: http-go
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/http-go
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-fvtzt
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-fvtzt
      secret:
        defaultMode: 420
        secretName: default-token-fvtzt
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:53:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6ed21127d3bf14c84fe9170820087ba47da337c7a5f47c3375293a2da6fcdbf8
      image: gasbugs/http-go:latest
      imageID: docker-pullable://gasbugs/http-go@sha256:5cf243f818caf7a750761cfe2ff822a284d6eb459356318d3f0bd4b1efe141d9
      lastState: {}
      name: http-go
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:53:31Z"
    - containerID: docker://fc8ce82c2d8e0dbb5858ebd2e51bc9cf56c619498b077499170db9b50bcae88c
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:53:35Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://6021ff9bc1e28de98274d4a8bb730a9a56f0872232b390807f33ac079f19fbfc
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://6021ff9bc1e28de98274d4a8bb730a9a56f0872232b390807f33ac079f19fbfc
          exitCode: 0
          finishedAt: "2021-01-14T07:53:24Z"
          reason: Completed
          startedAt: "2021-01-14T07:53:24Z"
    phase: Running
    podIP: 10.32.0.19
    podIPs:
    - ip: 10.32.0.19
    qosClass: Burstable
    startTime: "2021-01-14T07:53:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: productpage-v1-65576bb7bf-
    labels:
      app: productpage
      istio.io/rev: default
      pod-template-hash: 65576bb7bf
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: productpage
      service.istio.io/canonical-revision: v1
      version: v1
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6bedfe22-f8f4-4501-aa19-4119ab0642b4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"productpage"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:42:58Z"
    name: productpage-v1-65576bb7bf-psj4k
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: productpage-v1-65576bb7bf
      uid: 6bedfe22-f8f4-4501-aa19-4119ab0642b4
    resourceVersion: "27206540"
    uid: 20e9d64e-f039-4bb3-8c3a-a3c33cf543c6
  spec:
    containers:
    - image: docker.io/istio/examples-bookinfo-productpage-v1:1.16.2
      imagePullPolicy: IfNotPresent
      name: productpage
      ports:
      - containerPort: 9080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-productpage-token-knhb8
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - productpage.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"containerPort":9080,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: productpage
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: productpage-v1
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/productpage-v1
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-productpage-token-knhb8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-productpage-token-knhb8
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: bookinfo-productpage
    serviceAccountName: bookinfo-productpage
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp
    - name: bookinfo-productpage-token-knhb8
      secret:
        defaultMode: 420
        secretName: bookinfo-productpage-token-knhb8
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://496b2dd3988e3f1e84a6f8f3e9eee3f3031c5b11df5f42660f46ab1f992f7947
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:51Z"
    - containerID: docker://bbb520292aa7985245273a13e5a735d7f71b6d49aaba543e89eb646dc00db1e2
      image: istio/examples-bookinfo-productpage-v1:1.16.2
      imageID: docker-pullable://istio/examples-bookinfo-productpage-v1@sha256:63ac3b4fb6c3ba395f5d044b0e10bae513afb34b9b7d862b3a7c3de7e0686667
      lastState: {}
      name: productpage
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:29Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://a3eef25983be4fccc65e822b3470122607a3bff233b3224a588bc9d67932e8df
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://a3eef25983be4fccc65e822b3470122607a3bff233b3224a588bc9d67932e8df
          exitCode: 0
          finishedAt: "2021-01-14T09:42:28Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:28Z"
    phase: Running
    podIP: 10.38.0.4
    podIPs:
    - ip: 10.38.0.4
    qosClass: Burstable
    startTime: "2021-01-14T09:42:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: ratings-v1-7d99676f7f-
    labels:
      app: ratings
      istio.io/rev: default
      pod-template-hash: 7d99676f7f
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: ratings
      service.istio.io/canonical-revision: v1
      version: v1
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4ba875f5-b637-40f6-adca-f3445465bde8"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"ratings"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.9"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:43:00Z"
    name: ratings-v1-7d99676f7f-xnzz8
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ratings-v1-7d99676f7f
      uid: 4ba875f5-b637-40f6-adca-f3445465bde8
    resourceVersion: "27206551"
    uid: dcf85931-69d5-4789-a3e6-c5d8f1189bd1
  spec:
    containers:
    - image: docker.io/istio/examples-bookinfo-ratings-v1:1.16.2
      imagePullPolicy: IfNotPresent
      name: ratings
      ports:
      - containerPort: 9080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-ratings-token-68gqq
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - ratings.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"containerPort":9080,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: ratings
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: ratings-v1
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/ratings-v1
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-ratings-token-68gqq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-ratings-token-68gqq
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: bookinfo-ratings
    serviceAccountName: bookinfo-ratings
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: bookinfo-ratings-token-68gqq
      secret:
        defaultMode: 420
        secretName: bookinfo-ratings-token-68gqq
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:34Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://9c0bd682c24553559b08deade4d39f3cee813eb463ec3809e97824fc79199da7
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:56Z"
    - containerID: docker://1a6968fc906a3ceb2164424ac84f46dc1e617f3cbddc48ff0cee57022b912ba7
      image: istio/examples-bookinfo-ratings-v1:1.16.2
      imageID: docker-pullable://istio/examples-bookinfo-ratings-v1@sha256:5fbfd3a14fff229f15e689d07e5214bc5eb1e929766e45eda761cbc9ef7a5589
      lastState: {}
      name: ratings
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:34Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://91d4ae3d667fdd0f5951dc1234a720374f86a453a4a5e479bb9bcaa0ee68100a
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://91d4ae3d667fdd0f5951dc1234a720374f86a453a4a5e479bb9bcaa0ee68100a
          exitCode: 0
          finishedAt: "2021-01-14T09:42:33Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:33Z"
    phase: Running
    podIP: 10.38.0.9
    podIPs:
    - ip: 10.38.0.9
    qosClass: Burstable
    startTime: "2021-01-14T09:42:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-13T04:29:09Z"
    generateName: reviews-v1-987d495c-
    labels:
      app: reviews
      istio.io/rev: default
      pod-template-hash: 987d495c
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: reviews
      service.istio.io/canonical-revision: v1
      version: v1
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b6b5d140-2f4f-417f-897c-8fcaf4d82b62"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"reviews"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"LOG_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/opt/ibm/wlp/output"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"wlp-output"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:29:09Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.13"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-13T04:30:32Z"
    name: reviews-v1-987d495c-r52wh
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: reviews-v1-987d495c
      uid: b6b5d140-2f4f-417f-897c-8fcaf4d82b62
    resourceVersion: "26897260"
    uid: ae085762-e85f-48cc-aefd-16918b75dc18
  spec:
    containers:
    - env:
      - name: LOG_DIR
        value: /tmp/logs
      image: docker.io/istio/examples-bookinfo-reviews-v1:1.16.2
      imagePullPolicy: IfNotPresent
      name: reviews
      ports:
      - containerPort: 9080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /opt/ibm/wlp/output
        name: wlp-output
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - reviews.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"containerPort":9080,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: reviews
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: reviews-v1
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/reviews-v1
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: bookinfo-reviews
    serviceAccountName: bookinfo-reviews
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: wlp-output
    - emptyDir: {}
      name: tmp
    - name: bookinfo-reviews-token-2m75g
      secret:
        defaultMode: 420
        secretName: bookinfo-reviews-token-2m75g
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:29:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:30:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:30:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:29:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://827f3b2ca6ed4b02e314d472ce2bc81d6f7ca48f0c042cdf0eb4bad33eef2a73
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T04:30:28Z"
    - containerID: docker://0258a18650e8d49437f94f842bf0d979d10608553f69e5f53ff807dbd57075e6
      image: istio/examples-bookinfo-reviews-v1:1.16.2
      imageID: docker-pullable://istio/examples-bookinfo-reviews-v1@sha256:d1b8447be70549f1f7303f266d88c16112e2695cc110603fdb1c8ee432a627bf
      lastState: {}
      name: reviews
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T04:30:20Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://705a8c9c4dd1dfa8bf05a917656e0b73dae99537687a7b487f49b5e186fa10bc
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://705a8c9c4dd1dfa8bf05a917656e0b73dae99537687a7b487f49b5e186fa10bc
          exitCode: 0
          finishedAt: "2021-01-13T04:29:17Z"
          reason: Completed
          startedAt: "2021-01-13T04:29:17Z"
    phase: Running
    podIP: 10.32.0.13
    podIPs:
    - ip: 10.32.0.13
    qosClass: Burstable
    startTime: "2021-01-13T04:29:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: reviews-v2-6c5bf657cf-
    labels:
      app: reviews
      istio.io/rev: default
      pod-template-hash: 6c5bf657cf
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: reviews
      service.istio.io/canonical-revision: v2
      version: v2
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a4e92a97-555a-4633-a834-017812cabe29"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"reviews"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"LOG_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/opt/ibm/wlp/output"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"wlp-output"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.12"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:43:09Z"
    name: reviews-v2-6c5bf657cf-bkkqw
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: reviews-v2-6c5bf657cf
      uid: a4e92a97-555a-4633-a834-017812cabe29
    resourceVersion: "27206591"
    uid: 19dfe5f5-2927-470e-a7be-a9519ee1a0ed
  spec:
    containers:
    - env:
      - name: LOG_DIR
        value: /tmp/logs
      image: docker.io/istio/examples-bookinfo-reviews-v2:1.16.2
      imagePullPolicy: IfNotPresent
      name: reviews
      ports:
      - containerPort: 9080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /opt/ibm/wlp/output
        name: wlp-output
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - reviews.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"containerPort":9080,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: reviews
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: reviews-v2
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/reviews-v2
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: bookinfo-reviews
    serviceAccountName: bookinfo-reviews
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: wlp-output
    - emptyDir: {}
      name: tmp
    - name: bookinfo-reviews-token-2m75g
      secret:
        defaultMode: 420
        secretName: bookinfo-reviews-token-2m75g
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:43:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://3766f5571045f8ba42bc18471c747bce6b59d59e897b618a69b8e53619d22e6e
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:43:03Z"
    - containerID: docker://53c665db0626b2ec345d70c9aacd97aabda0391e420c4b2c579e5c6178b541a1
      image: istio/examples-bookinfo-reviews-v2:1.16.2
      imageID: docker-pullable://istio/examples-bookinfo-reviews-v2@sha256:82497d66ab8cac1ad9506218e4ccc708ec1db59450c6c4c8d645d1b161611a5d
      lastState: {}
      name: reviews
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:42Z"
    hostIP: 10.1.11.7
    initContainerStatuses:
    - containerID: docker://5b92229c1facaed9fe7e5f0139b209d9bcf9349839d406f42e0a08a9ba08cfdb
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://5b92229c1facaed9fe7e5f0139b209d9bcf9349839d406f42e0a08a9ba08cfdb
          exitCode: 0
          finishedAt: "2021-01-14T09:42:40Z"
          reason: Completed
          startedAt: "2021-01-14T09:42:40Z"
    phase: Running
    podIP: 10.38.0.12
    podIPs:
    - ip: 10.38.0.12
    qosClass: Burstable
    startTime: "2021-01-14T09:42:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/status: '{"version":"e2cb9d4837cda9584fd272bfa1f348525bcaacfadb7e9b9efbd21a3bb44ad7a1","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null}'
    creationTimestamp: "2021-01-13T04:29:08Z"
    generateName: reviews-v3-5f7b9f4f77-
    labels:
      app: reviews
      istio.io/rev: default
      pod-template-hash: 5f7b9f4f77
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: reviews
      service.istio.io/canonical-revision: v3
      version: v3
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dca64a3f-b431-44f5-a116-152f0b34c531"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"reviews"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"LOG_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/opt/ibm/wlp/output"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"wlp-output"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:29:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.12"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-13T04:30:30Z"
    name: reviews-v3-5f7b9f4f77-2fpzb
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: reviews-v3-5f7b9f4f77
      uid: dca64a3f-b431-44f5-a116-152f0b34c531
    resourceVersion: "26897247"
    uid: b553c705-8a56-4dfd-8792-b185f94ab435
  spec:
    containers:
    - env:
      - name: LOG_DIR
        value: /tmp/logs
      image: docker.io/istio/examples-bookinfo-reviews-v3:1.16.2
      imagePullPolicy: IfNotPresent
      name: reviews
      ports:
      - containerPort: 9080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /opt/ibm/wlp/output
        name: wlp-output
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --serviceCluster
      - reviews.$(POD_NAMESPACE)
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: PROXY_CONFIG
        value: |
          {"proxyMetadata":{"DNS_AGENT":""}}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"containerPort":9080,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: reviews
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: reviews-v3
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/default/deployments/reviews-v3
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - istio-iptables
      - -p
      - "15001"
      - -z
      - "15006"
      - -u
      - "1337"
      - -m
      - REDIRECT
      - -i
      - '*'
      - -x
      - ""
      - -b
      - '*'
      - -d
      - 15090,15021,15020
      env:
      - name: DNS_AGENT
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: Always
      name: istio-init
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: false
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: bookinfo-reviews-token-2m75g
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: bookinfo-reviews
    serviceAccountName: bookinfo-reviews
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: wlp-output
    - emptyDir: {}
      name: tmp
    - name: bookinfo-reviews-token-2m75g
      secret:
        defaultMode: 420
        secretName: bookinfo-reviews-token-2m75g
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:29:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:30:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:30:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T04:29:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://700d8af85f25d0e0efff86cc7f1fc758155906e80a50f7ee385128fb62c46e24
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T04:30:26Z"
    - containerID: docker://4be1c7cc182987df568a46ef947b08d75aacb9433bf5f186d55cf4408ab04d76
      image: istio/examples-bookinfo-reviews-v3:1.16.2
      imageID: docker-pullable://istio/examples-bookinfo-reviews-v3@sha256:f812dcc7ab76dba313ce0a9ae3010d4ae705da3ce4e636ec3d0c50c709d296a4
      lastState: {}
      name: reviews
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T04:30:20Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://39017d492cb7e51ae5baca8b8f46f4efc57f86afc72ba3614de69605ed9cd9ba
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://39017d492cb7e51ae5baca8b8f46f4efc57f86afc72ba3614de69605ed9cd9ba
          exitCode: 0
          finishedAt: "2021-01-13T04:29:15Z"
          reason: Completed
          startedAt: "2021-01-13T04:29:15Z"
    phase: Running
    podIP: 10.32.0.12
    podIPs:
    - ip: 10.32.0.12
    qosClass: Burstable
    startTime: "2021-01-13T04:29:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-12T08:26:13Z"
    generateName: es-operator-elasticsearch-operator-575d9966bc-
    labels:
      app: elasticsearch-operator
      pod-template-hash: 575d9966bc
      release: es-operator
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dbebd352-34bc-4804-8b85-9711f933320d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"elasticsearch-operator"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-12T08:26:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-12T08:26:31Z"
    name: es-operator-elasticsearch-operator-575d9966bc-rjqk5
    namespace: efk-logging
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: es-operator-elasticsearch-operator-575d9966bc
      uid: dbebd352-34bc-4804-8b85-9711f933320d
    resourceVersion: "26710716"
    uid: ff7913e2-40ba-4f42-a494-3a883edf3575
  spec:
    containers:
    - args:
      - -c
      - /usr/local/bin/elasticsearch-operator -initDaemonsetNamespace $(NAMESPACE)
      command:
      - /bin/sh
      env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: upmcenterprises/elasticsearch-operator:0.3.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /live
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: elasticsearch-operator
      ports:
      - containerPort: 8000
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: es-operator-elasticsearch-operator-token-gzq6h
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: es-operator-elasticsearch-operator
    serviceAccountName: es-operator-elasticsearch-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: es-operator-elasticsearch-operator-token-gzq6h
      secret:
        defaultMode: 420
        secretName: es-operator-elasticsearch-operator-token-gzq6h
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T08:26:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T08:26:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T08:26:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T08:26:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://feae491af5b842492004b5ccadb07437ba7a190ca1e911e067114ff4bfeffb66
      image: upmcenterprises/elasticsearch-operator:0.3.0
      imageID: docker-pullable://upmcenterprises/elasticsearch-operator@sha256:940e252b753908d5ad30e8a6d01d4b9595ac8dfa903bab5e08f48834f4956c1b
      lastState: {}
      name: elasticsearch-operator
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-12T08:26:15Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.7
    podIPs:
    - ip: 10.32.0.7
    qosClass: Guaranteed
    startTime: "2021-01-12T08:26:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/configmap: 04e5ccf37e4130439017b11d463d699a987c43a7845ddd4fad551b4226055def
      checksum/secrets: 1187decf4242a376b96abd5abd06404313fb5368132d9bc3bc48f6fab25dfada
      prometheus.io/port: "9252"
      prometheus.io/scrape: "true"
    creationTimestamp: "2021-01-14T07:19:15Z"
    generateName: runner-gitlab-runner-69779496d5-
    labels:
      app: runner-gitlab-runner
      chart: gitlab-runner-0.19.3
      heritage: Tiller
      pod-template-hash: 69779496d5
      release: runner
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/configmap: {}
            f:checksum/secrets: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"37252fc4-1f0e-4222-b09e-77ef619ff176"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"runner-gitlab-runner"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CI_SERVER_URL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLONE_URL"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_CPU_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_CPU_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_IMAGE"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_MEMORY_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_MEMORY_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_MEMORY_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_MEMORY_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_POLL_TIMEOUT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_PRIVILEGED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_PULL_POLICY"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_CPU_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_CPU_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_MEMORY_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_MEMORY_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"REGISTER_LOCKED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_EXECUTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_OUTPUT_LIMIT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_REQUEST_CONCURRENCY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_TAG_LIST"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9252,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/home/gitlab-runner/.gitlab-runner"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/scripts"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:initContainers:
            .: {}
            k:{"name":"configure"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CI_SERVER_URL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLONE_URL"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_CPU_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_CPU_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_IMAGE"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_MEMORY_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_HELPER_MEMORY_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_MEMORY_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_MEMORY_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_POLL_TIMEOUT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_PRIVILEGED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_PULL_POLICY"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_CPU_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_CPU_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_MEMORY_LIMIT"}:
                  .: {}
                  f:name: {}
                k:{"name":"KUBERNETES_SERVICE_MEMORY_REQUEST"}:
                  .: {}
                  f:name: {}
                k:{"name":"REGISTER_LOCKED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_EXECUTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_OUTPUT_LIMIT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_REQUEST_CONCURRENCY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"RUNNER_TAG_LIST"}:
                  .: {}
                  f:name: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/init-secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"etc-gitlab-runner"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"init-runner-secrets"}:
              .: {}
              f:name: {}
              f:projected:
                .: {}
                f:defaultMode: {}
                f:sources: {}
            k:{"name":"runner-secrets"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
            k:{"name":"scripts"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:19:14Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.16"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T07:20:05Z"
    name: runner-gitlab-runner-69779496d5-blbtw
    namespace: gitlab-managed-apps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: runner-gitlab-runner-69779496d5
      uid: 37252fc4-1f0e-4222-b09e-77ef619ff176
    resourceVersion: "27181428"
    uid: b90d4cac-cf7e-4b4e-a991-c619ac485d2f
  spec:
    containers:
    - command:
      - /bin/bash
      - /scripts/entrypoint
      env:
      - name: CI_SERVER_URL
        value: http://20.194.41.47:31111/
      - name: CLONE_URL
      - name: RUNNER_REQUEST_CONCURRENCY
        value: "1"
      - name: RUNNER_EXECUTOR
        value: kubernetes
      - name: REGISTER_LOCKED
        value: "true"
      - name: RUNNER_TAG_LIST
      - name: RUNNER_OUTPUT_LIMIT
        value: "4096"
      - name: KUBERNETES_IMAGE
        value: ubuntu:16.04
      - name: KUBERNETES_PRIVILEGED
        value: "true"
      - name: KUBERNETES_NAMESPACE
        value: gitlab-managed-apps
      - name: KUBERNETES_POLL_TIMEOUT
        value: "180"
      - name: KUBERNETES_CPU_LIMIT
      - name: KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_MEMORY_LIMIT
      - name: KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_CPU_REQUEST
      - name: KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_MEMORY_REQUEST
      - name: KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_SERVICE_ACCOUNT
      - name: KUBERNETES_SERVICE_CPU_LIMIT
      - name: KUBERNETES_SERVICE_MEMORY_LIMIT
      - name: KUBERNETES_SERVICE_CPU_REQUEST
      - name: KUBERNETES_SERVICE_MEMORY_REQUEST
      - name: KUBERNETES_HELPER_CPU_LIMIT
      - name: KUBERNETES_HELPER_MEMORY_LIMIT
      - name: KUBERNETES_HELPER_CPU_REQUEST
      - name: KUBERNETES_HELPER_MEMORY_REQUEST
      - name: KUBERNETES_HELPER_IMAGE
      - name: KUBERNETES_PULL_POLICY
      image: gitlab/gitlab-runner:alpine-v13.2.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/bash
          - /scripts/check-live
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: runner-gitlab-runner
      ports:
      - containerPort: 9252
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /usr/bin/pgrep
          - gitlab.*runner
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /secrets
        name: runner-secrets
      - mountPath: /home/gitlab-runner/.gitlab-runner
        name: etc-gitlab-runner
      - mountPath: /scripts
        name: scripts
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: runner-gitlab-runner-token-kjnnl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - sh
      - /config/configure
      env:
      - name: CI_SERVER_URL
        value: http://20.194.41.47:31111/
      - name: CLONE_URL
      - name: RUNNER_REQUEST_CONCURRENCY
        value: "1"
      - name: RUNNER_EXECUTOR
        value: kubernetes
      - name: REGISTER_LOCKED
        value: "true"
      - name: RUNNER_TAG_LIST
      - name: RUNNER_OUTPUT_LIMIT
        value: "4096"
      - name: KUBERNETES_IMAGE
        value: ubuntu:16.04
      - name: KUBERNETES_PRIVILEGED
        value: "true"
      - name: KUBERNETES_NAMESPACE
        value: gitlab-managed-apps
      - name: KUBERNETES_POLL_TIMEOUT
        value: "180"
      - name: KUBERNETES_CPU_LIMIT
      - name: KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_MEMORY_LIMIT
      - name: KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_CPU_REQUEST
      - name: KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_MEMORY_REQUEST
      - name: KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED
      - name: KUBERNETES_SERVICE_ACCOUNT
      - name: KUBERNETES_SERVICE_CPU_LIMIT
      - name: KUBERNETES_SERVICE_MEMORY_LIMIT
      - name: KUBERNETES_SERVICE_CPU_REQUEST
      - name: KUBERNETES_SERVICE_MEMORY_REQUEST
      - name: KUBERNETES_HELPER_CPU_LIMIT
      - name: KUBERNETES_HELPER_MEMORY_LIMIT
      - name: KUBERNETES_HELPER_CPU_REQUEST
      - name: KUBERNETES_HELPER_MEMORY_REQUEST
      - name: KUBERNETES_HELPER_IMAGE
      - name: KUBERNETES_PULL_POLICY
      image: gitlab/gitlab-runner:alpine-v13.2.3
      imagePullPolicy: IfNotPresent
      name: configure
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /secrets
        name: runner-secrets
      - mountPath: /config
        name: scripts
        readOnly: true
      - mountPath: /init-secrets
        name: init-runner-secrets
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: runner-gitlab-runner-token-kjnnl
        readOnly: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65533
      runAsUser: 100
    serviceAccount: runner-gitlab-runner
    serviceAccountName: runner-gitlab-runner
    terminationGracePeriodSeconds: 3600
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: runner-secrets
    - emptyDir:
        medium: Memory
      name: etc-gitlab-runner
    - name: init-runner-secrets
      projected:
        defaultMode: 420
        sources:
        - secret:
            items:
            - key: runner-registration-token
              path: runner-registration-token
            - key: runner-token
              path: runner-token
            name: runner-gitlab-runner
    - configMap:
        defaultMode: 420
        name: runner-gitlab-runner
      name: scripts
    - name: runner-gitlab-runner-token-kjnnl
      secret:
        defaultMode: 420
        secretName: runner-gitlab-runner-token-kjnnl
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:20:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:20:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://14e60f8d20090e6eff07d519c95d5403667d90c30a8d7fb16fefb911d548076a
      image: gitlab/gitlab-runner:alpine-v13.2.3
      imageID: docker-pullable://gitlab/gitlab-runner@sha256:5ca179d082231fcf38de96a022702c5ca1dbea3a8c3a046e8683d83431bb6f14
      lastState: {}
      name: runner-gitlab-runner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:19:46Z"
    hostIP: 10.1.11.9
    initContainerStatuses:
    - containerID: docker://d313b3fd4a7cf39817eec634f3bd29b5a289ad19b3946b0df91a75aa9b361302
      image: gitlab/gitlab-runner:alpine-v13.2.3
      imageID: docker-pullable://gitlab/gitlab-runner@sha256:5ca179d082231fcf38de96a022702c5ca1dbea3a8c3a046e8683d83431bb6f14
      lastState: {}
      name: configure
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://d313b3fd4a7cf39817eec634f3bd29b5a289ad19b3946b0df91a75aa9b361302
          exitCode: 0
          finishedAt: "2021-01-14T07:19:44Z"
          reason: Completed
          startedAt: "2021-01-14T07:19:44Z"
    phase: Running
    podIP: 10.32.0.16
    podIPs:
    - ip: 10.32.0.16
    qosClass: BestEffort
    startTime: "2021-01-14T07:19:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-11-17T10:01:18Z"
    generateName: ingress-nginx-admission-create-
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/version: 0.41.2
      controller-uid: af1e20a2-7c20-4ea0-b0ce-44cceb7943e9
      helm.sh/chart: ingress-nginx-3.10.1
      job-name: ingress-nginx-admission-create
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:controller-uid: {}
            f:helm.sh/chart: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"af1e20a2-7c20-4ea0-b0ce-44cceb7943e9"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"create"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-17T10:01:18Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-17T10:01:21Z"
    name: ingress-nginx-admission-create-dn2mx
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: ingress-nginx-admission-create
      uid: af1e20a2-7c20-4ea0-b0ce-44cceb7943e9
    resourceVersion: "14487079"
    uid: 07937f7e-910f-4b26-8868-5696e0e9797d
  spec:
    containers:
    - args:
      - create
      - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
      - --namespace=$(POD_NAMESPACE)
      - --secret-name=ingress-nginx-admission
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: docker.io/jettech/kube-webhook-certgen:v1.5.0
      imagePullPolicy: IfNotPresent
      name: create
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: ingress-nginx-admission-token-pqdl8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 2000
    serviceAccount: ingress-nginx-admission
    serviceAccountName: ingress-nginx-admission
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: ingress-nginx-admission-token-pqdl8
      secret:
        defaultMode: 420
        secretName: ingress-nginx-admission-token-pqdl8
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:19Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:19Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:19Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://be3f322b53f5829bdff4cbb8216b8c17e80d81c4c78b84fb9322e153746061b9
      image: jettech/kube-webhook-certgen:v1.5.0
      imageID: docker-pullable://jettech/kube-webhook-certgen@sha256:fb7c2cd46ccfdd2809165152ec3f2cd0ae1dfc74cc74671b1dea73f034a87acf
      lastState: {}
      name: create
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: docker://be3f322b53f5829bdff4cbb8216b8c17e80d81c4c78b84fb9322e153746061b9
          exitCode: 0
          finishedAt: "2020-11-17T10:01:21Z"
          reason: Completed
          startedAt: "2020-11-17T10:01:20Z"
    hostIP: 10.1.11.9
    phase: Succeeded
    podIP: 10.32.0.3
    podIPs:
    - ip: 10.32.0.3
    qosClass: BestEffort
    startTime: "2020-11-17T10:01:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-11-17T10:01:19Z"
    generateName: ingress-nginx-admission-patch-
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/version: 0.41.2
      controller-uid: bf3db82a-409c-446e-9b59-8e6c3135c5cb
      helm.sh/chart: ingress-nginx-3.10.1
      job-name: ingress-nginx-admission-patch
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:controller-uid: {}
            f:helm.sh/chart: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"bf3db82a-409c-446e-9b59-8e6c3135c5cb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"patch"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-17T10:01:19Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-17T10:01:23Z"
    name: ingress-nginx-admission-patch-hdcd2
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: ingress-nginx-admission-patch
      uid: bf3db82a-409c-446e-9b59-8e6c3135c5cb
    resourceVersion: "14487093"
    uid: 645d7352-7e67-4e5c-adb5-f5d13c469860
  spec:
    containers:
    - args:
      - patch
      - --webhook-name=ingress-nginx-admission
      - --namespace=$(POD_NAMESPACE)
      - --patch-mutating=false
      - --secret-name=ingress-nginx-admission
      - --patch-failure-policy=Fail
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: docker.io/jettech/kube-webhook-certgen:v1.5.0
      imagePullPolicy: IfNotPresent
      name: patch
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: ingress-nginx-admission-token-pqdl8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 2000
    serviceAccount: ingress-nginx-admission
    serviceAccountName: ingress-nginx-admission
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: ingress-nginx-admission-token-pqdl8
      secret:
        defaultMode: 420
        secretName: ingress-nginx-admission-token-pqdl8
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:19Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:19Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:19Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://06fac3e33ec8bd0e3208979a5a98addf016179685c1d6d0211171fb430e746c8
      image: jettech/kube-webhook-certgen:v1.5.0
      imageID: docker-pullable://jettech/kube-webhook-certgen@sha256:fb7c2cd46ccfdd2809165152ec3f2cd0ae1dfc74cc74671b1dea73f034a87acf
      lastState: {}
      name: patch
      ready: false
      restartCount: 1
      started: false
      state:
        terminated:
          containerID: docker://06fac3e33ec8bd0e3208979a5a98addf016179685c1d6d0211171fb430e746c8
          exitCode: 0
          finishedAt: "2020-11-17T10:01:21Z"
          reason: Completed
          startedAt: "2020-11-17T10:01:21Z"
    hostIP: 10.1.11.9
    phase: Succeeded
    podIP: 10.32.0.4
    podIPs:
    - ip: 10.32.0.4
    qosClass: BestEffort
    startTime: "2020-11-17T10:01:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-11-17T10:01:18Z"
    generateName: ingress-nginx-controller-5dbd9649d4-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      pod-template-hash: 5dbd9649d4
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"84154e2d-df41-458c-b6a7-f521a21da907"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"controller"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"LD_PRELOAD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/usr/local/certificates/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"webhook-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-17T10:01:18Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-17T10:01:42Z"
    name: ingress-nginx-controller-5dbd9649d4-8b267
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-controller-5dbd9649d4
      uid: 84154e2d-df41-458c-b6a7-f521a21da907
    resourceVersion: "14487152"
    uid: 71a18562-e66d-4b2c-bf04-ed0e8eeae142
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --election-id=ingress-controller-leader
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: k8s.gcr.io/ingress-nginx/controller:v0.41.2@sha256:1f4f402b9c14f3ae92b11ada1dfe9893a88f0faeb0b2f4b903e2c67a0c3bf0de
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsUser: 101
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: ingress-nginx-token-9k4sr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx
    serviceAccountName: ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-admission
    - name: ingress-nginx-token-9k4sr
      secret:
        defaultMode: 420
        secretName: ingress-nginx-token-9k4sr
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-17T10:01:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://e2d724f1366d98941f5157d522efe2c734d79af99ba37824b21d178c394a15d5
      image: sha256:81d7cdfa4169014de17e59d9b8b3eb0d3d34c771843af76921065fd1b9656832
      imageID: docker-pullable://k8s.gcr.io/ingress-nginx/controller@sha256:1f4f402b9c14f3ae92b11ada1dfe9893a88f0faeb0b2f4b903e2c67a0c3bf0de
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2020-11-17T10:01:23Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.3
    podIPs:
    - ip: 10.32.0.3
    qosClass: Burstable
    startTime: "2020-11-17T10:01:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: d2485b1ee9f9be63381c231826a43742bb10ebac2964bdc3f22a100eab9d032c
      checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      sidecar.istio.io/inject: "false"
    creationTimestamp: "2021-01-14T07:19:14Z"
    generateName: grafana-784c89f4cf-
    labels:
      app: grafana
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
      pod-template-hash: 784c89f4cf
    name: grafana-784c89f4cf-x9vqt
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: grafana-784c89f4cf
      uid: eb3d33bf-1479-46e7-a64a-b24279056a51
    resourceVersion: "27181460"
    uid: 4362ab79-9f84-4a45-8593-a2cd3e5db649
  spec:
    containers:
    - env:
      - name: GF_AUTH_ANONYMOUS_ENABLED
        value: "true"
      - name: GF_AUTH_ANONYMOUS_ORG_ROLE
        value: Admin
      - name: GF_AUTH_BASIC_ENABLED
        value: "false"
      - name: GF_SECURITY_ADMIN_PASSWORD
        value: '-'
      - name: GF_SECURITY_ADMIN_USER
        value: '-'
      image: grafana/grafana:7.2.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 10
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: grafana
      ports:
      - containerPort: 3000
        name: service
        protocol: TCP
      - containerPort: 3000
        name: grafana
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/grafana/grafana.ini
        name: config
        subPath: grafana.ini
      - mountPath: /var/lib/grafana
        name: storage
      - mountPath: /var/lib/grafana/dashboards/istio
        name: dashboards-istio
      - mountPath: /var/lib/grafana/dashboards/istio-services
        name: dashboards-istio-services
      - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
        name: config
        subPath: datasources.yaml
      - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
        name: config
        subPath: dashboardproviders.yaml
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: grafana-token-ppj9j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 472
      runAsGroup: 472
      runAsUser: 472
    serviceAccount: grafana
    serviceAccountName: grafana
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: grafana
      name: config
    - configMap:
        defaultMode: 420
        name: istio-grafana-dashboards
      name: dashboards-istio
    - configMap:
        defaultMode: 420
        name: istio-services-grafana-dashboards
      name: dashboards-istio-services
    - emptyDir: {}
      name: storage
    - name: grafana-token-ppj9j
      secret:
        defaultMode: 420
        secretName: grafana-token-ppj9j
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:20:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:20:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:15Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://648634a08c4e987e7f5cd212a6ae38444726143d2e5f56d7f54dcd591c17d810
      image: grafana/grafana:7.2.1
      imageID: docker-pullable://grafana/grafana@sha256:733842cca5bd9bcab1eb795da264863a8245402ff3ac8ff17e274334bb32c692
      lastState: {}
      name: grafana
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:20:03Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.18
    podIPs:
    - ip: 10.32.0.18
    qosClass: BestEffort
    startTime: "2021-01-14T07:19:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/inject: "false"
    creationTimestamp: "2021-01-13T02:25:28Z"
    generateName: istio-egressgateway-d84f95b69-
    labels:
      app: istio-egressgateway
      chart: gateways
      heritage: Tiller
      install.operator.istio.io/owning-resource: unknown
      istio: egressgateway
      istio.io/rev: default
      operator.istio.io/component: EgressGateways
      pod-template-hash: d84f95b69
      release: istio
      service.istio.io/canonical-name: istio-egressgateway
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/path: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
            f:sidecar.istio.io/inject: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:heritage: {}
            f:install.operator.istio.io/owning-resource: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:pod-template-hash: {}
            f:release: {}
            f:service.istio.io/canonical-name: {}
            f:service.istio.io/canonical-revision: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"bb6d5902-18e2-473e-b918-a579aa1b7b34"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"istio-proxy"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"CA_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CANONICAL_REVISION"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"CANONICAL_SERVICE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"HOST_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"INSTANCE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"ISTIO_META_CLUSTER_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ISTIO_META_OWNER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ISTIO_META_ROUTER_MODE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ISTIO_META_WORKLOAD_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"JWT_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"PILOT_CERT_PROVIDER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":8443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":15090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":15443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:privileged: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/istio/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/istio/egressgateway-ca-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/istio/egressgateway-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/istio/pod"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/istio/proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/istio/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/ingress_gateway"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/secrets/istio"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsGroup: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"egressgateway-ca-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"egressgateway-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"gatewaysdsudspath"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"istio-data"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"istio-envoy"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"istiod-ca-cert"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"podinfo"}:
              .: {}
              f:downwardAPI:
                .: {}
                f:defaultMode: {}
                f:items: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.9"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-13T02:25:48Z"
    name: istio-egressgateway-d84f95b69-6cllr
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: istio-egressgateway-d84f95b69
      uid: bb6d5902-18e2-473e-b918-a579aa1b7b34
    resourceVersion: "26875078"
    uid: c2c9b040-1e44-443c-8099-edc2091402f7
  spec:
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - preference:
            matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
          weight: 2
        - preference:
            matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - ppc64le
          weight: 2
        - preference:
            matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - s390x
          weight: 2
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - ppc64le
              - s390x
    containers:
    - args:
      - proxy
      - router
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --log_output_level=default:info
      - --serviceCluster
      - istio-egressgateway
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: ISTIO_META_WORKLOAD_NAME
        value: istio-egressgateway
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-egressgateway
      - name: ISTIO_META_ROUTER_MODE
        value: standard
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: IfNotPresent
      name: istio-proxy
      ports:
      - containerPort: 8080
        protocol: TCP
      - containerPort: 8443
        protocol: TCP
      - containerPort: 15443
        protocol: TCP
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/config
        name: config-volume
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/run/ingress_gateway
        name: gatewaysdsudspath
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/pod
        name: podinfo
      - mountPath: /etc/istio/egressgateway-certs
        name: egressgateway-certs
        readOnly: true
      - mountPath: /etc/istio/egressgateway-ca-certs
        name: egressgateway-ca-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: istio-egressgateway-service-account-token-mxrrk
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
      runAsGroup: 1337
      runAsNonRoot: true
      runAsUser: 1337
    serviceAccount: istio-egressgateway-service-account
    serviceAccountName: istio-egressgateway-service-account
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: podinfo
    - emptyDir: {}
      name: istio-envoy
    - emptyDir: {}
      name: gatewaysdsudspath
    - emptyDir: {}
      name: istio-data
    - configMap:
        defaultMode: 420
        name: istio
        optional: true
      name: config-volume
    - name: egressgateway-certs
      secret:
        defaultMode: 420
        optional: true
        secretName: istio-egressgateway-certs
    - name: egressgateway-ca-certs
      secret:
        defaultMode: 420
        optional: true
        secretName: istio-egressgateway-ca-certs
    - name: istio-egressgateway-service-account-token-mxrrk
      secret:
        defaultMode: 420
        secretName: istio-egressgateway-service-account-token-mxrrk
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0cf8e2ec527cd4a529c7f61b3cec95ccc97e14560c0d18ee8f407b8e6d1806b7
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T02:25:44Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.9
    podIPs:
    - ip: 10.32.0.9
    qosClass: Burstable
    startTime: "2021-01-13T02:25:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      sidecar.istio.io/inject: "false"
    creationTimestamp: "2021-01-13T02:25:29Z"
    generateName: istio-ingressgateway-75f6d79f48-
    labels:
      app: istio-ingressgateway
      chart: gateways
      heritage: Tiller
      install.operator.istio.io/owning-resource: unknown
      istio: ingressgateway
      istio.io/rev: default
      operator.istio.io/component: IngressGateways
      pod-template-hash: 75f6d79f48
      release: istio
      service.istio.io/canonical-name: istio-ingressgateway
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/path: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
            f:sidecar.istio.io/inject: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:heritage: {}
            f:install.operator.istio.io/owning-resource: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:pod-template-hash: {}
            f:release: {}
            f:service.istio.io/canonical-name: {}
            f:service.istio.io/canonical-revision: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b76b8b55-1b1b-4d7d-b22d-78c0c10a133b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"istio-proxy"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"CA_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CANONICAL_REVISION"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"CANONICAL_SERVICE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"HOST_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"INSTANCE_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"ISTIO_META_CLUSTER_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ISTIO_META_OWNER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ISTIO_META_ROUTER_MODE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ISTIO_META_WORKLOAD_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"JWT_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"PILOT_CERT_PROVIDER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":8443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":15021,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":15090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":15443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":31400,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:privileged: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/istio/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/istio/ingressgateway-ca-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/istio/ingressgateway-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/istio/pod"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/istio/proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/istio/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/ingress_gateway"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/secrets/istio"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsGroup: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
                f:optional: {}
              f:name: {}
            k:{"name":"gatewaysdsudspath"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"ingressgateway-ca-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"ingressgateway-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"istio-data"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"istio-envoy"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"istiod-ca-cert"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"podinfo"}:
              .: {}
              f:downwardAPI:
                .: {}
                f:defaultMode: {}
                f:items: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:29Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.10"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-13T02:25:47Z"
    name: istio-ingressgateway-75f6d79f48-nxhrk
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: istio-ingressgateway-75f6d79f48
      uid: b76b8b55-1b1b-4d7d-b22d-78c0c10a133b
    resourceVersion: "26875068"
    uid: 400dbc31-60ed-43fa-ad67-3045247f8fcc
  spec:
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - preference:
            matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
          weight: 2
        - preference:
            matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - ppc64le
          weight: 2
        - preference:
            matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - s390x
          weight: 2
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - ppc64le
              - s390x
    containers:
    - args:
      - proxy
      - router
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --log_output_level=default:info
      - --serviceCluster
      - istio-ingressgateway
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod.istio-system.svc:15012
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: CANONICAL_SERVICE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-name']
      - name: CANONICAL_REVISION
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels['service.istio.io/canonical-revision']
      - name: ISTIO_META_WORKLOAD_NAME
        value: istio-ingressgateway
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-ingressgateway
      - name: ISTIO_META_ROUTER_MODE
        value: standard
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      image: docker.io/istio/proxyv2:1.8.1
      imagePullPolicy: IfNotPresent
      name: istio-proxy
      ports:
      - containerPort: 15021
        protocol: TCP
      - containerPort: 8080
        protocol: TCP
      - containerPort: 8443
        protocol: TCP
      - containerPort: 31400
        protocol: TCP
      - containerPort: 15443
        protocol: TCP
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 40Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/config
        name: config-volume
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/run/ingress_gateway
        name: gatewaysdsudspath
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/pod
        name: podinfo
      - mountPath: /etc/istio/ingressgateway-certs
        name: ingressgateway-certs
        readOnly: true
      - mountPath: /etc/istio/ingressgateway-ca-certs
        name: ingressgateway-ca-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: istio-ingressgateway-service-account-token-rzhk8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
      runAsGroup: 1337
      runAsNonRoot: true
      runAsUser: 1337
    serviceAccount: istio-ingressgateway-service-account
    serviceAccountName: istio-ingressgateway-service-account
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: podinfo
    - emptyDir: {}
      name: istio-envoy
    - emptyDir: {}
      name: gatewaysdsudspath
    - emptyDir: {}
      name: istio-data
    - configMap:
        defaultMode: 420
        name: istio
        optional: true
      name: config-volume
    - name: ingressgateway-certs
      secret:
        defaultMode: 420
        optional: true
        secretName: istio-ingressgateway-certs
    - name: ingressgateway-ca-certs
      secret:
        defaultMode: 420
        optional: true
        secretName: istio-ingressgateway-ca-certs
    - name: istio-ingressgateway-service-account-token-rzhk8
      secret:
        defaultMode: 420
        secretName: istio-ingressgateway-service-account-token-rzhk8
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:29Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:47Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:47Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://62e892688e0a54bd850e99e6e4ef21827076b8d9215b9f75eb2db26b2cbcadbe
      image: istio/proxyv2:1.8.1
      imageID: docker-pullable://istio/proxyv2@sha256:0a407ecee363d8d31957162b82738ae3dd09690668a0168d660044ac8fc728f0
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T02:25:44Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.10
    podIPs:
    - ip: 10.32.0.10
    qosClass: Burstable
    startTime: "2021-01-13T02:25:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "15014"
      prometheus.io/scrape: "true"
      sidecar.istio.io/inject: "false"
    creationTimestamp: "2021-01-13T02:25:01Z"
    generateName: istiod-c9f6864c4-
    labels:
      app: istiod
      install.operator.istio.io/owning-resource: unknown
      istio: pilot
      istio.io/rev: default
      operator.istio.io/component: Pilot
      pod-template-hash: c9f6864c4
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
            f:sidecar.istio.io/inject: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"95567e1a-47ae-4e36-95e9-b1fb451c1fb5"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"discovery"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"CENTRAL_ISTIOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_LEGACY_FSGROUP_INJECTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"EXTERNAL_ISTIOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"INJECTION_WEBHOOK_CONFIG_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ISTIOD_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"JWT_POLICY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBECONFIG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PILOT_CERT_PROVIDER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PILOT_ENABLE_ANALYSIS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PILOT_ENDPOINT_TELEMETRY_LABEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PILOT_TRACE_SAMPLING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"REVISION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVICE_ACCOUNT"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":15010,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":15017,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
                k:{"containerPort":15053,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/cacerts"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/istio/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/istio/inject"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/secrets/istio-dns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/secrets/remote"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"cacerts"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"inject"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"istio-kubeconfig"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"local-certs"}:
              .: {}
              f:emptyDir:
                .: {}
                f:medium: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:01Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.8"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-13T02:25:25Z"
    name: istiod-c9f6864c4-7zbtz
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: istiod-c9f6864c4
      uid: 95567e1a-47ae-4e36-95e9-b1fb451c1fb5
    resourceVersion: "26874922"
    uid: 50b90953-98d7-4f54-9e0c-dee0d8fc5d86
  spec:
    containers:
    - args:
      - discovery
      - --monitoringAddr=:15014
      - --log_output_level=default:info
      - --domain
      - cluster.local
      - --keepaliveMaxServerConnectionAge
      - 30m
      env:
      - name: REVISION
        value: default
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: KUBECONFIG
        value: /var/run/secrets/remote/config
      - name: ENABLE_LEGACY_FSGROUP_INJECTION
        value: "false"
      - name: PILOT_TRACE_SAMPLING
        value: "100"
      - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND
        value: "true"
      - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND
        value: "true"
      - name: INJECTION_WEBHOOK_CONFIG_NAME
        value: istio-sidecar-injector
      - name: ISTIOD_ADDR
        value: istiod.istio-system.svc:15012
      - name: PILOT_ENABLE_ANALYSIS
        value: "false"
      - name: CLUSTER_ID
        value: Kubernetes
      - name: EXTERNAL_ISTIOD
        value: "false"
      - name: CENTRAL_ISTIOD
        value: "false"
      - name: PILOT_ENDPOINT_TELEMETRY_LABEL
        value: "true"
      image: docker.io/istio/pilot:1.8.1
      imagePullPolicy: IfNotPresent
      name: discovery
      ports:
      - containerPort: 8080
        protocol: TCP
      - containerPort: 15010
        protocol: TCP
      - containerPort: 15017
        protocol: TCP
      - containerPort: 15053
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 3
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 100Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/istio/config
        name: config-volume
      - mountPath: /var/run/secrets/istio-dns
        name: local-certs
      - mountPath: /etc/cacerts
        name: cacerts
        readOnly: true
      - mountPath: /var/run/secrets/remote
        name: istio-kubeconfig
        readOnly: true
      - mountPath: /var/lib/istio/inject
        name: inject
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: istiod-service-account-token-hfn5t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: istiod-service-account
    serviceAccountName: istiod-service-account
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: local-certs
    - name: cacerts
      secret:
        defaultMode: 420
        optional: true
        secretName: cacerts
    - name: istio-kubeconfig
      secret:
        defaultMode: 420
        optional: true
        secretName: istio-kubeconfig
    - configMap:
        defaultMode: 420
        name: istio-sidecar-injector
      name: inject
    - configMap:
        defaultMode: 420
        name: istio
      name: config-volume
    - name: istiod-service-account-token-hfn5t
      secret:
        defaultMode: 420
        secretName: istiod-service-account-token-hfn5t
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T02:25:01Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d98c11ab4558c48a69df8c30a46f08ad57c924c071ebd2605efb3cbc4299be85
      image: istio/pilot:1.8.1
      imageID: docker-pullable://istio/pilot@sha256:2fe9f9cd22bcfb724c706124feadaaa18dfc11c1a434aad21c2b7ec5c52ccca2
      lastState: {}
      name: discovery
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T02:25:23Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.8
    podIPs:
    - ip: 10.32.0.8
    qosClass: Burstable
    startTime: "2021-01-13T02:25:01Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "14269"
      prometheus.io/scrape: "true"
      sidecar.istio.io/inject: "false"
    creationTimestamp: "2021-01-14T07:19:14Z"
    generateName: jaeger-7f78b6fb65-
    labels:
      app: jaeger
      pod-template-hash: 7f78b6fb65
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
            f:sidecar.istio.io/inject: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1672e584-3007-4079-8012-6f5fdc04d500"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"jaeger"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"BADGER_DIRECTORY_KEY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BADGER_DIRECTORY_VALUE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BADGER_EPHEMERAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"COLLECTOR_ZIPKIN_HTTP_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MEMORY_MAX_TRACES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"QUERY_BASE_PATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SPAN_STORAGE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/badger"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"data"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:19:14Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.17"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T07:19:59Z"
    name: jaeger-7f78b6fb65-rt4wj
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: jaeger-7f78b6fb65
      uid: 1672e584-3007-4079-8012-6f5fdc04d500
    resourceVersion: "27181388"
    uid: 6d80ffb9-15b8-4109-90fb-b4be9f41b0a8
  spec:
    containers:
    - env:
      - name: BADGER_EPHEMERAL
        value: "false"
      - name: SPAN_STORAGE_TYPE
        value: badger
      - name: BADGER_DIRECTORY_VALUE
        value: /badger/data
      - name: BADGER_DIRECTORY_KEY
        value: /badger/key
      - name: COLLECTOR_ZIPKIN_HTTP_PORT
        value: "9411"
      - name: MEMORY_MAX_TRACES
        value: "50000"
      - name: QUERY_BASE_PATH
        value: /jaeger
      image: docker.io/jaegertracing/all-in-one:1.20
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 14269
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: jaeger
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 14269
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /badger
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-bcn72
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: data
    - name: default-token-bcn72
      secret:
        defaultMode: 420
        secretName: default-token-bcn72
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T07:19:15Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2ca297e21f1772e0a629b0281a22ae09a8bd10fa98fb23ded783c0e40c3cc4df
      image: jaegertracing/all-in-one:1.20
      imageID: docker-pullable://jaegertracing/all-in-one@sha256:54c2ea315dab7215c51c1b06b111c666f594e90317584f84eabbc59aa5856b13
      lastState: {}
      name: jaeger
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T07:19:47Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.17
    podIPs:
    - ip: 10.32.0.17
    qosClass: Burstable
    startTime: "2021-01-14T07:19:15Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kiali.io/runtimes: go,kiali
      prometheus.io/port: "9090"
      prometheus.io/scrape: "true"
      sidecar.istio.io/inject: "false"
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: kiali-7476977cf9-
    labels:
      app: kiali
      app.kubernetes.io/instance: kiali-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kiali
      app.kubernetes.io/version: v1.26.0
      helm.sh/chart: kiali-server-1.26.0
      pod-template-hash: 7476977cf9
      version: v1.26.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kiali.io/runtimes: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
            f:sidecar.istio.io/inject: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"32d20567-f3e4-4649-9ca8-88a623b90bd3"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kiali"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"ACTIVE_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":20001,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/kiali-cert"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/kiali-configuration"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/kiali-secret"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"kiali-cert"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"kiali-configuration"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"kiali-secret"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:42:42Z"
    name: kiali-7476977cf9-ml9qd
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kiali-7476977cf9
      uid: 32d20567-f3e4-4649-9ca8-88a623b90bd3
    resourceVersion: "27206479"
    uid: aac5e969-8254-4ea7-8151-2e0e805d1bbe
  spec:
    containers:
    - command:
      - /opt/kiali/kiali
      - -config
      - /kiali-configuration/config.yaml
      - -v
      - "3"
      env:
      - name: ACTIVE_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/kiali/kiali:v1.26
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /kiali/healthz
          port: api-port
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 1
      name: kiali
      ports:
      - containerPort: 20001
        name: api-port
        protocol: TCP
      - containerPort: 9090
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /kiali/healthz
          port: api-port
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kiali-configuration
        name: kiali-configuration
      - mountPath: /kiali-cert
        name: kiali-cert
      - mountPath: /kiali-secret
        name: kiali-secret
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kiali-token-vqjn9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kiali
    serviceAccountName: kiali
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: kiali
      name: kiali-configuration
    - name: kiali-cert
      secret:
        defaultMode: 420
        optional: true
        secretName: istio.kiali-service-account
    - name: kiali-secret
      secret:
        defaultMode: 420
        optional: true
        secretName: kiali
    - name: kiali-token-vqjn9
      secret:
        defaultMode: 420
        secretName: kiali-token-vqjn9
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://26d8970d30ab80ad1b9324e92b08a58fee391ad6d9301a5ae846d7bb06375cd3
      image: quay.io/kiali/kiali:v1.26
      imageID: docker-pullable://quay.io/kiali/kiali@sha256:e0984cee145121044c9fbea2f1eabee35a02a9d1e5869c2b349f0df9bbd3a395
      lastState: {}
      name: kiali
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:20Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.38.0.2
    podIPs:
    - ip: 10.38.0.2
    qosClass: BestEffort
    startTime: "2021-01-14T09:42:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      sidecar.istio.io/inject: "false"
    creationTimestamp: "2021-01-13T06:11:57Z"
    generateName: prometheus-7bfddb8dbf-
    labels:
      app: prometheus
      chart: prometheus-11.16.2
      component: server
      heritage: Helm
      pod-template-hash: 7bfddb8dbf
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:sidecar.istio.io/inject: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5f31ad87-a30b-4b7a-b268-8f4927fa86d3"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"prometheus-server"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"prometheus-server-configmap-reload"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:runAsGroup: {}
            f:runAsNonRoot: {}
            f:runAsUser: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"storage-volume"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T06:11:57Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-13T06:12:22Z"
    name: prometheus-7bfddb8dbf-5s8rf
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-7bfddb8dbf
      uid: 5f31ad87-a30b-4b7a-b268-8f4927fa86d3
    resourceVersion: "26915565"
    uid: ab31939b-11a3-4e4b-80e5-fb00da2f6c64
  spec:
    containers:
    - args:
      - --volume-dir=/etc/config
      - --webhook-url=http://127.0.0.1:9090/-/reload
      image: jimmidyson/configmap-reload:v0.4.0
      imagePullPolicy: IfNotPresent
      name: prometheus-server-configmap-reload
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-token-675sc
        readOnly: true
    - args:
      - --storage.tsdb.retention.time=15d
      - --config.file=/etc/config/prometheus.yml
      - --storage.tsdb.path=/data
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
      image: prom/prometheus:v2.21.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/healthy
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 30
      name: prometheus-server
      ports:
      - containerPort: 9090
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 9090
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 30
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
      - mountPath: /data
        name: storage-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: prometheus-token-675sc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus
    serviceAccountName: prometheus
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: prometheus
      name: config-volume
    - emptyDir: {}
      name: storage-volume
    - name: prometheus-token-675sc
      secret:
        defaultMode: 420
        secretName: prometheus-token-675sc
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T06:11:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T06:12:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T06:12:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-13T06:11:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2541b27e05e6fa45e80602601740d3d15950d762f48d032fd9f7306eaf3c8c72
      image: prom/prometheus:v2.21.0
      imageID: docker-pullable://prom/prometheus@sha256:d43417c260e516508eed1f1d59c10c49d96bbea93eafb4955b0df3aea5908971
      lastState: {}
      name: prometheus-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T06:12:21Z"
    - containerID: docker://cbebfa749b41a0fab1cb81eb2571db5da13685dd795fd3d0d455011fe82cb989
      image: jimmidyson/configmap-reload:v0.4.0
      imageID: docker-pullable://jimmidyson/configmap-reload@sha256:17d34fd73f9e8a78ba7da269d96822ce8972391c2838e08d92a990136adb8e4a
      lastState: {}
      name: prometheus-server-configmap-reload
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-13T06:12:04Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.2
    podIPs:
    - ip: 10.32.0.2
    qosClass: BestEffort
    startTime: "2021-01-13T06:11:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: coredns-74ff55c5b-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 74ff55c5b
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"398f5b58-0046-4382-a0cd-872e874ba60c"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:42:20Z"
    name: coredns-74ff55c5b-2cxmn
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-74ff55c5b
      uid: 398f5b58-0046-4382-a0cd-872e874ba60c
    resourceVersion: "27206344"
    uid: cfbe734c-c7d7-40a6-97cd-6db1628ec82b
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns:1.7.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-5962g
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-5962g
      secret:
        defaultMode: 420
        secretName: coredns-token-5962g
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1e75efdfd3a3a625c09657ea16ddfd9b26f0e811ab4e24c7e58f6fece82fd48b
      image: k8s.gcr.io/coredns:1.7.0
      imageID: docker-pullable://k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:19Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.38.0.5
    podIPs:
    - ip: 10.38.0.5
    qosClass: Burstable
    startTime: "2021-01-14T09:42:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: coredns-74ff55c5b-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 74ff55c5b
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"398f5b58-0046-4382-a0cd-872e874ba60c"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:42:28Z"
    name: coredns-74ff55c5b-rg6gb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-74ff55c5b
      uid: 398f5b58-0046-4382-a0cd-872e874ba60c
    resourceVersion: "27206398"
    uid: 169333e9-c50e-46a7-b869-5d6430f5788c
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns:1.7.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-5962g
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-5962g
      secret:
        defaultMode: 420
        secretName: coredns-token-5962g
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://22b41f3d42705260865d843a3cde95a4a0044f02353f76c54047a59c9780f95d
      image: k8s.gcr.io/coredns:1.7.0
      imageID: docker-pullable://k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:17Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.38.0.3
    podIPs:
    - ip: 10.38.0.3
    qosClass: Burstable
    startTime: "2021-01-14T09:42:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/etcd.advertise-client-urls: https://10.1.11.7:2379
      kubernetes.io/config.hash: d07f69edd9e23d51aa294c9c410ba8ec
      kubernetes.io/config.mirror: d07f69edd9e23d51aa294c9c410ba8ec
      kubernetes.io/config.seen: "2021-01-14T09:28:22.354441777Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-01-14T09:29:09Z"
    labels:
      component: etcd
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/etcd.advertise-client-urls: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ecc13b2c-42cc-432c-9acc-114db1df740b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"etcd"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/pki/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etcd-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etcd-data"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.7"}:
              .: {}
              f:ip: {}
          f:qosClass: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:33:08Z"
    name: etcd-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: master
      uid: ecc13b2c-42cc-432c-9acc-114db1df740b
    resourceVersion: "27204848"
    uid: 1251a18a-e441-4322-8db3-78b9068705e3
  spec:
    containers:
    - command:
      - etcd
      - --advertise-client-urls=https://10.1.11.7:2379
      - --cert-file=/etc/kubernetes/pki/etcd/server.crt
      - --client-cert-auth=true
      - --data-dir=/var/lib/etcd
      - --initial-advertise-peer-urls=https://10.1.11.7:2380
      - --initial-cluster=master=https://10.1.11.7:2380
      - --key-file=/etc/kubernetes/pki/etcd/server.key
      - --listen-client-urls=https://127.0.0.1:2379,https://10.1.11.7:2379
      - --listen-metrics-urls=http://127.0.0.1:2381
      - --listen-peer-urls=https://10.1.11.7:2380
      - --name=master
      - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt
      - --peer-client-cert-auth=true
      - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key
      - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      - --snapshot-count=10000
      - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      image: k8s.gcr.io/etcd:3.4.13-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources:
        requests:
          cpu: 100m
          ephemeral-storage: 100Mi
          memory: 100Mi
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd
        name: etcd-data
      - mountPath: /etc/kubernetes/pki/etcd
        name: etcd-certs
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/pki/etcd
        type: DirectoryOrCreate
      name: etcd-certs
    - hostPath:
        path: /var/lib/etcd
        type: DirectoryOrCreate
      name: etcd-data
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:33:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:33:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://25b781a2f727e494891e704072615651bf4e48af263e8350516863204ba55ca1
      image: k8s.gcr.io/etcd:3.4.13-0
      imageID: docker-pullable://k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2
      lastState: {}
      name: etcd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:28:51Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.1.11.7
    podIPs:
    - ip: 10.1.11.7
    qosClass: Burstable
    startTime: "2021-01-14T09:15:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 10.1.11.7:6443
      kubernetes.io/config.hash: 9ab65f898f837c00e8b17a8296ea44d8
      kubernetes.io/config.mirror: 9ab65f898f837c00e8b17a8296ea44d8
      kubernetes.io/config.seen: "2021-01-14T09:29:10.720466186Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-01-14T09:29:10Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ecc13b2c-42cc-432c-9acc-114db1df740b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-apiserver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/local/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-local-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T13:53:26Z"
    name: kube-apiserver-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: master
      uid: ecc13b2c-42cc-432c-9acc-114db1df740b
    resourceVersion: "27236175"
    uid: e3ed4b0c-2139-447d-b175-85cb74a28c31
  spec:
    containers:
    - command:
      - kube-apiserver
      - --advertise-address=10.1.11.7
      - --allow-privileged=true
      - --authorization-mode=Node,RBAC
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --enable-admission-plugins=NodeRestriction
      - --enable-bootstrap-token-auth=true
      - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
      - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
      - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --insecure-port=0
      - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
      - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
      - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=6443
      - --service-account-issuer=https://kubernetes.default.svc.cluster.local
      - --service-account-key-file=/etc/kubernetes/pki/sa.pub
      - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.96.0.0/12
      - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
      - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      image: k8s.gcr.io/kube-apiserver:v1.20.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 10.1.11.7
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 10.1.11.7
          path: /readyz
          port: 6443
          scheme: HTTPS
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 15
      resources:
        requests:
          cpu: 250m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 10.1.11.7
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T13:53:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T13:53:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://75dc5fafe0019aebb193fd106f6d0136d84b05dfb0c87f1b723f2bee173f54ea
      image: k8s.gcr.io/kube-apiserver:v1.20.0
      imageID: docker-pullable://k8s.gcr.io/kube-apiserver@sha256:8b8125d7a6e4225b08f04f65ca947b27d0cc86380bf09fab890cc80408230114
      lastState: {}
      name: kube-apiserver
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:29:12Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.1.11.7
    podIPs:
    - ip: 10.1.11.7
    qosClass: Burstable
    startTime: "2021-01-14T09:15:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 44a62a90dcaf9d7d801180d864610e8d
      kubernetes.io/config.mirror: 44a62a90dcaf9d7d801180d864610e8d
      kubernetes.io/config.seen: "2021-01-14T09:29:21.633539907Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-01-14T09:29:22Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ecc13b2c-42cc-432c-9acc-114db1df740b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-controller-manager"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/controller-manager.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/libexec/kubernetes/kubelet-plugins/volume/exec"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/usr/local/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flexvolume-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-local-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T13:54:35Z"
    name: kube-controller-manager-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: master
      uid: ecc13b2c-42cc-432c-9acc-114db1df740b
    resourceVersion: "27236363"
    uid: d8168d03-47a0-4b91-9fb7-5ddfe81e4e2a
  spec:
    containers:
    - command:
      - kube-controller-manager
      - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --bind-address=127.0.0.1
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --cluster-name=kubernetes
      - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
      - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
      - --controllers=*,bootstrapsigner,tokencleaner
      - --kubeconfig=/etc/kubernetes/controller-manager.conf
      - --leader-elect=true
      - --port=0
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --root-ca-file=/etc/kubernetes/pki/ca.crt
      - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
      - --use-service-account-credentials=true
      image: k8s.gcr.io/kube-controller-manager:v1.20.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/kubernetes/controller-manager.conf
        name: kubeconfig
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        type: DirectoryOrCreate
      name: flexvolume-dir
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/kubernetes/controller-manager.conf
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:54Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T13:54:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T13:54:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bf5a22f1c031838f13d47a26c68e8c72382d5ce1c0b109bbd6460dd68a29d6c9
      image: k8s.gcr.io/kube-controller-manager:v1.20.0
      imageID: docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:00ccc3a5735e82d53bc26054d594a942fae64620a6f84018c057a519ba7ed1dc
      lastState:
        terminated:
          containerID: docker://166aa4d8c4e6bf1953c752cdf7dc94ad59709d7de7bb019e763743ae96f7fee0
          exitCode: 255
          finishedAt: "2021-01-14T13:52:57Z"
          reason: Error
          startedAt: "2021-01-14T09:29:24Z"
      name: kube-controller-manager
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-14T13:53:27Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.1.11.7
    podIPs:
    - ip: 10.1.11.7
    qosClass: Burstable
    startTime: "2021-01-14T09:15:54Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-14T09:29:59Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 774bf47ffd
      k8s-app: kube-proxy
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"03a3fd1a-2b51-4bc8-9591-0a9e30cdc818"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:29:59Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:30:01Z"
    name: kube-proxy-6lrm2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 03a3fd1a-2b51-4bc8-9591-0a9e30cdc818
    resourceVersion: "27204339"
    uid: 899b69e7-fe76-4bd2-b839-79a7464757a3
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - master
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.20.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-2bphw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-proxy-token-2bphw
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-2bphw
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:29:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:29:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c45f8b4b9ce2216a50dd49bc7b3412b65704c5c472979fa90edcab70c8c1310c
      image: k8s.gcr.io/kube-proxy:v1.20.0
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:40423415eebbd598d1c2660a0a38606ad1d949ea9404c405eaf25929163b479d
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:30:01Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.1.11.7
    podIPs:
    - ip: 10.1.11.7
    qosClass: BestEffort
    startTime: "2021-01-14T09:29:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-14T09:30:12Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 774bf47ffd
      k8s-app: kube-proxy
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"03a3fd1a-2b51-4bc8-9591-0a9e30cdc818"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:30:12Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.8"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:30:25Z"
    name: kube-proxy-pq4wc
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 03a3fd1a-2b51-4bc8-9591-0a9e30cdc818
    resourceVersion: "27204420"
    uid: c683a489-7397-4730-92b9-5ee173b396f9
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - worker1
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.20.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-2bphw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-proxy-token-2bphw
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-2bphw
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://278aab89a09508dea88d5f5df8f5b9851a361a28fc8d874f2b2d5d49ff2b57c5
      image: k8s.gcr.io/kube-proxy:v1.20.0
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:40423415eebbd598d1c2660a0a38606ad1d949ea9404c405eaf25929163b479d
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:30:24Z"
    hostIP: 10.1.11.8
    phase: Running
    podIP: 10.1.11.8
    podIPs:
    - ip: 10.1.11.8
    qosClass: BestEffort
    startTime: "2021-01-14T09:30:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-14T09:30:33Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 774bf47ffd
      k8s-app: kube-proxy
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"03a3fd1a-2b51-4bc8-9591-0a9e30cdc818"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:30:33Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.9"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:30:46Z"
    name: kube-proxy-tdbrn
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 03a3fd1a-2b51-4bc8-9591-0a9e30cdc818
    resourceVersion: "27204486"
    uid: 8ba06c71-edb7-4372-9831-b693accf83bb
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - worker2
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.20.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-2bphw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-proxy-token-2bphw
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-2bphw
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:30:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://d52c69bf5f78220581e81163439dec2a46309ce84ef1387c1200c27223e40b1c
      image: k8s.gcr.io/kube-proxy:v1.20.0
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:40423415eebbd598d1c2660a0a38606ad1d949ea9404c405eaf25929163b479d
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:30:45Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.1.11.9
    podIPs:
    - ip: 10.1.11.9
    qosClass: BestEffort
    startTime: "2021-01-14T09:30:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 81d2d21449d64d5e6d5e9069a7ca99ed
      kubernetes.io/config.mirror: 81d2d21449d64d5e6d5e9069a7ca99ed
      kubernetes.io/config.seen: "2021-01-14T09:29:26.301852049Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-01-14T09:29:26Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ecc13b2c-42cc-432c-9acc-114db1df740b"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-scheduler"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/scheduler.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T13:54:44Z"
    name: kube-scheduler-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: master
      uid: ecc13b2c-42cc-432c-9acc-114db1df740b
    resourceVersion: "27236381"
    uid: f9e4d15a-af96-4a4e-8a5d-0214eb8a7833
  spec:
    containers:
    - command:
      - kube-scheduler
      - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      - --bind-address=127.0.0.1
      - --kubeconfig=/etc/kubernetes/scheduler.conf
      - --leader-elect=true
      - --port=0
      image: k8s.gcr.io/kube-scheduler:v1.20.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/scheduler.conf
        name: kubeconfig
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/scheduler.conf
        type: FileOrCreate
      name: kubeconfig
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:54Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T13:54:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T13:54:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:15:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://fd542044ef08a25626ae125b11e44766cc95d05edb3c29a70d04c057a0a236bf
      image: k8s.gcr.io/kube-scheduler:v1.20.0
      imageID: docker-pullable://k8s.gcr.io/kube-scheduler@sha256:beaa710325047fa9c867eff4ab9af38d9c2acec05ac5b416c708c304f76bdbef
      lastState:
        terminated:
          containerID: docker://972382ac81a67836277413f119c24d82c2c4cb8ff42e664f35e5a166f29f9af5
          exitCode: 255
          finishedAt: "2021-01-14T13:52:58Z"
          reason: Error
          startedAt: "2021-01-14T09:29:28Z"
      name: kube-scheduler
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-01-14T13:53:26Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.1.11.7
    podIPs:
    - ip: 10.1.11.7
    qosClass: Burstable
    startTime: "2021-01-14T09:15:54Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-14T09:42:08Z"
    generateName: metrics-server-75f98fdbd5-
    labels:
      k8s-app: metrics-server
      pod-template-hash: 75f98fdbd5
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2b3b8dfd-afcd-44e5-b8fb-44bba17a5a00"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"metrics-server"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":4443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp-dir"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:08Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.38.0.1"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:42:20Z"
    name: metrics-server-75f98fdbd5-7qcm5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-75f98fdbd5
      uid: 2b3b8dfd-afcd-44e5-b8fb-44bba17a5a00
    resourceVersion: "27206329"
    uid: 7230184c-e3a4-4b7e-bcec-0e645adcac67
  spec:
    containers:
    - args:
      - --cert-dir=/tmp
      - --secure-port=4443
      - --kubelet-insecure-tls
      - --kubelet-preferred-address-types=InternalIP
      image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
      imagePullPolicy: IfNotPresent
      name: metrics-server
      ports:
      - containerPort: 4443
        name: main-port
        protocol: TCP
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metrics-server-token-rjjdv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-dir
    - name: metrics-server-token-rjjdv
      secret:
        defaultMode: 420
        secretName: metrics-server-token-rjjdv
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:42:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4f8230b9debf93801189f160a55d88ba70f29725de27bb1a517eec76ea5b4f96
      image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
      imageID: docker-pullable://k8s.gcr.io/metrics-server/metrics-server@sha256:eec279de92328954ec69e9c2ef920861de28d31bb14b5290b53b5ef3dfa96502
      lastState: {}
      name: metrics-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:42:14Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.38.0.1
    podIPs:
    - ip: 10.38.0.1
    qosClass: BestEffort
    startTime: "2021-01-14T09:42:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-09-08T07:46:13Z"
    generateName: weave-net-
    labels:
      controller-revision-hash: 6b6bdb4ccb
      name: weave-net
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7b585268-9450-4428-b810-350224f9dfa1"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"weave"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/home"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/var/lib/dbus"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/weavedb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"weave-npc"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:seLinuxOptions: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-bin2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dbus"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"weavedb"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-09-08T07:46:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.8"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:58:19Z"
    name: weave-net-p964j
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-net
      uid: 7b585268-9450-4428-b810-350224f9dfa1
    resourceVersion: "27208531"
    uid: f8b62a4d-a7c3-46c9-919d-4823f0a0b025
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - worker1
    containers:
    - command:
      - /home/weave/launch.sh
      env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-kube:2.7.0
      imagePullPolicy: IfNotPresent
      name: weave
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /status
          port: 6784
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /weavedb
        name: weavedb
      - mountPath: /host/opt
        name: cni-bin
      - mountPath: /host/home
        name: cni-bin2
      - mountPath: /host/etc
        name: cni-conf
      - mountPath: /host/var/lib/dbus
        name: dbus
      - mountPath: /lib/modules
        name: lib-modules
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-knhps
        readOnly: true
    - env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-npc:2.7.0
      imagePullPolicy: IfNotPresent
      name: weave-npc
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-knhps
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seLinuxOptions: {}
    serviceAccount: weave-net
    serviceAccountName: weave-net
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/weave
        type: ""
      name: weavedb
    - hostPath:
        path: /opt
        type: ""
      name: cni-bin
    - hostPath:
        path: /home
        type: ""
      name: cni-bin2
    - hostPath:
        path: /etc
        type: ""
      name: cni-conf
    - hostPath:
        path: /var/lib/dbus
        type: ""
      name: dbus
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: weave-net-token-knhps
      secret:
        defaultMode: 420
        secretName: weave-net-token-knhps
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-09-08T07:46:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:58:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:58:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-09-08T07:46:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c4c77d48ed4c096d232e40e394f348061329b6444986315db1d955b888a920b3
      image: weaveworks/weave-kube:2.7.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:f5488cc0e18f0df33aace12f13b5d7c479e3202ae4baf3971b7572d9c9e8fa0a
      lastState:
        terminated:
          containerID: docker://0b106aa219600fd4937519d29841d702f7d9e97600ddfcc64fee2865d0c2aaac
          exitCode: 143
          finishedAt: "2020-12-03T06:33:00Z"
          reason: Error
          startedAt: "2020-11-23T10:44:52Z"
      name: weave
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-12-03T06:33:08Z"
    - containerID: docker://bf11921ce3e75f357fa67ae3db9350ed7f2908e575c49bdb6b88a80a6b138d66
      image: weaveworks/weave-npc:2.7.0
      imageID: docker-pullable://weaveworks/weave-npc@sha256:4ae4204ead601e63447f8d004c6fd4490a44155d68cce11503eedf94f4b4c4ce
      lastState:
        terminated:
          containerID: docker://9b1fc45df8c5bc81465b6b07a92c9395847e1c48d7dbc5cd494e419c73fd856a
          exitCode: 1
          finishedAt: "2020-12-03T06:33:00Z"
          reason: Error
          startedAt: "2020-11-23T10:44:53Z"
      name: weave-npc
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2020-12-03T06:33:09Z"
    hostIP: 10.1.11.8
    phase: Running
    podIP: 10.1.11.8
    podIPs:
    - ip: 10.1.11.8
    qosClass: Burstable
    startTime: "2020-09-08T07:46:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-09-08T07:46:13Z"
    generateName: weave-net-
    labels:
      controller-revision-hash: 6b6bdb4ccb
      name: weave-net
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7b585268-9450-4428-b810-350224f9dfa1"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"weave"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/home"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/var/lib/dbus"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/weavedb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"weave-npc"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:seLinuxOptions: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-bin2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dbus"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"weavedb"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-21T04:15:36Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:32:00Z"
    name: weave-net-q6vj7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-net
      uid: 7b585268-9450-4428-b810-350224f9dfa1
    resourceVersion: "27204678"
    uid: fddb8017-e841-46dc-9642-7b20a99f7078
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - master
    containers:
    - command:
      - /home/weave/launch.sh
      env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-kube:2.7.0
      imagePullPolicy: IfNotPresent
      name: weave
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /status
          port: 6784
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /weavedb
        name: weavedb
      - mountPath: /host/opt
        name: cni-bin
      - mountPath: /host/home
        name: cni-bin2
      - mountPath: /host/etc
        name: cni-conf
      - mountPath: /host/var/lib/dbus
        name: dbus
      - mountPath: /lib/modules
        name: lib-modules
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-knhps
        readOnly: true
    - env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-npc:2.7.0
      imagePullPolicy: IfNotPresent
      name: weave-npc
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-knhps
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seLinuxOptions: {}
    serviceAccount: weave-net
    serviceAccountName: weave-net
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/weave
        type: ""
      name: weavedb
    - hostPath:
        path: /opt
        type: ""
      name: cni-bin
    - hostPath:
        path: /home
        type: ""
      name: cni-bin2
    - hostPath:
        path: /etc
        type: ""
      name: cni-conf
    - hostPath:
        path: /var/lib/dbus
        type: ""
      name: dbus
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: weave-net-token-knhps
      secret:
        defaultMode: 420
        secretName: weave-net-token-knhps
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-09-08T07:46:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:32:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:32:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-09-08T07:46:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ef93790d999d14f63194719515163157bd8e9f933c4977bdc18e291d2cdbd3c0
      image: weaveworks/weave-kube:2.7.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:f5488cc0e18f0df33aace12f13b5d7c479e3202ae4baf3971b7572d9c9e8fa0a
      lastState:
        terminated:
          containerID: docker://62d188681c9380a219f581f9bd707fae10374f311e7184c3c729647c9b55ed12
          exitCode: 143
          finishedAt: "2021-01-14T09:09:24Z"
          reason: Error
          startedAt: "2020-11-25T07:57:07Z"
      name: weave
      ready: true
      restartCount: 7
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:16:50Z"
    - containerID: docker://a1318765b1ae5032f17081c9b181753c3de8ef0bb46707213250dc23a8423843
      image: weaveworks/weave-npc:2.7.0
      imageID: docker-pullable://weaveworks/weave-npc@sha256:4ae4204ead601e63447f8d004c6fd4490a44155d68cce11503eedf94f4b4c4ce
      lastState: {}
      name: weave-npc
      ready: true
      restartCount: 5
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:16:52Z"
    hostIP: 10.1.11.7
    phase: Running
    podIP: 10.1.11.7
    podIPs:
    - ip: 10.1.11.7
    qosClass: Burstable
    startTime: "2020-09-08T07:46:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-09-08T07:46:13Z"
    generateName: weave-net-
    labels:
      controller-revision-hash: 6b6bdb4ccb
      name: weave-net
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7b585268-9450-4428-b810-350224f9dfa1"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"weave"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/home"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/var/lib/dbus"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/weavedb"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"weave-npc"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"HOSTNAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:seLinuxOptions: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-bin2"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dbus"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"weavedb"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-09-24T01:07:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.1.11.9"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-09-24T01:14:30Z"
    name: weave-net-v5qqm
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-net
      uid: 7b585268-9450-4428-b810-350224f9dfa1
    resourceVersion: "3250186"
    uid: 77a7a4ef-7a39-445a-bcf9-c7e622ef1f25
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - worker2
    containers:
    - command:
      - /home/weave/launch.sh
      env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-kube:2.7.0
      imagePullPolicy: IfNotPresent
      name: weave
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /status
          port: 6784
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /weavedb
        name: weavedb
      - mountPath: /host/opt
        name: cni-bin
      - mountPath: /host/home
        name: cni-bin2
      - mountPath: /host/etc
        name: cni-conf
      - mountPath: /host/var/lib/dbus
        name: dbus
      - mountPath: /lib/modules
        name: lib-modules
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-knhps
        readOnly: true
    - env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: docker.io/weaveworks/weave-npc:2.7.0
      imagePullPolicy: IfNotPresent
      name: weave-npc
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-net-token-knhps
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seLinuxOptions: {}
    serviceAccount: weave-net
    serviceAccountName: weave-net
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/weave
        type: ""
      name: weavedb
    - hostPath:
        path: /opt
        type: ""
      name: cni-bin
    - hostPath:
        path: /home
        type: ""
      name: cni-bin2
    - hostPath:
        path: /etc
        type: ""
      name: cni-conf
    - hostPath:
        path: /var/lib/dbus
        type: ""
      name: dbus
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: weave-net-token-knhps
      secret:
        defaultMode: 420
        secretName: weave-net-token-knhps
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-09-08T07:46:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-09-24T01:14:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-09-24T01:14:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-09-08T07:46:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8da188b19b45c7f14db163b83ca761bd75888820c00fe3ea9bf522782dbb1241
      image: weaveworks/weave-kube:2.7.0
      imageID: docker-pullable://weaveworks/weave-kube@sha256:f5488cc0e18f0df33aace12f13b5d7c479e3202ae4baf3971b7572d9c9e8fa0a
      lastState:
        terminated:
          containerID: docker://9b6ab2e2998a450093f920a864ccce74b78448b1b38e5fd66b805228756941e2
          exitCode: 1
          finishedAt: "2020-09-24T01:14:10Z"
          reason: Error
          startedAt: "2020-09-24T01:13:37Z"
      name: weave
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2020-09-24T01:14:26Z"
    - containerID: docker://0422db07ee1ecc524237132ddd9520beba809a740535ba9a654de5e9f865bd11
      image: weaveworks/weave-npc:2.7.0
      imageID: docker-pullable://weaveworks/weave-npc@sha256:4ae4204ead601e63447f8d004c6fd4490a44155d68cce11503eedf94f4b4c4ce
      lastState:
        terminated:
          containerID: docker://0dd554fa6a4807d00f72b5ac4f487661292123872f5d66739fa286f498327b39
          exitCode: 1
          finishedAt: "2020-09-24T01:06:19Z"
          reason: Error
          startedAt: "2020-09-24T01:04:31Z"
      name: weave-npc
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2020-09-24T01:13:38Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.1.11.9
    podIPs:
    - ip: 10.1.11.9
    qosClass: Burstable
    startTime: "2020-09-08T07:46:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2021-01-12T04:21:10Z"
    generateName: dashboard-metrics-scraper-79c5968bdc-
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 79c5968bdc
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:seccomp.security.alpha.kubernetes.io/pod: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d396216f-2ebf-40f5-8fec-ab05be59b7a9"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"dashboard-metrics-scraper"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"tmp-volume"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-12T04:21:10Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.6"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-12T04:21:12Z"
    name: dashboard-metrics-scraper-79c5968bdc-8952k
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dashboard-metrics-scraper-79c5968bdc
      uid: d396216f-2ebf-40f5-8fec-ab05be59b7a9
    resourceVersion: "26673302"
    uid: 8913d4ca-e61a-40fc-91b6-5ed4d4f3c011
  spec:
    containers:
    - image: kubernetesui/metrics-scraper:v1.0.6
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: dashboard-metrics-scraper
      ports:
      - containerPort: 8000
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kubernetes-dashboard-token-lzzs7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kubernetes-dashboard-token-lzzs7
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-token-lzzs7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T04:21:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T04:21:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T04:21:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T04:21:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://083399d065907273d2a85d0cf2dffa3826d9e11567fa948935de0e6aef8c75ae
      image: kubernetesui/metrics-scraper:v1.0.6
      imageID: docker-pullable://kubernetesui/metrics-scraper@sha256:1f977343873ed0e2efd4916a6b2f3075f310ff6fe42ee098f54fc58aa7a28ab7
      lastState: {}
      name: dashboard-metrics-scraper
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-01-12T04:21:11Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.6
    podIPs:
    - ip: 10.32.0.6
    qosClass: BestEffort
    startTime: "2021-01-12T04:21:10Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2021-01-12T04:21:09Z"
    generateName: kubernetes-dashboard-7448ffc97b-
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: 7448ffc97b
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5aed12e3-c043-4a92-9ab5-3e3d55dd6791"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kubernetes-dashboard"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kubernetes-dashboard-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"tmp-volume"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-12T04:21:09Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.32.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-01-14T09:18:06Z"
    name: kubernetes-dashboard-7448ffc97b-tk4mc
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-7448ffc97b
      uid: 5aed12e3-c043-4a92-9ab5-3e3d55dd6791
    resourceVersion: "27202046"
    uid: d5e6a37c-a791-49c7-98fa-d74d03b36d7a
  spec:
    containers:
    - args:
      - --auto-generate-certificates
      - --namespace=kubernetes-dashboard
      image: kubernetesui/dashboard:v2.1.0
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8443
          scheme: HTTPS
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: kubernetes-dashboard
      ports:
      - containerPort: 8443
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /certs
        name: kubernetes-dashboard-certs
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kubernetes-dashboard-token-lzzs7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kubernetes-dashboard-certs
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-certs
    - emptyDir: {}
      name: tmp-volume
    - name: kubernetes-dashboard-token-lzzs7
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-token-lzzs7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T04:21:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:18:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-01-14T09:18:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-01-12T04:21:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://5d76ce29e91a9bfa1c627c012922a29e3573567d610e07aa6e5921d6594ce182
      image: kubernetesui/dashboard:v2.1.0
      imageID: docker-pullable://kubernetesui/dashboard@sha256:7f80b5ba141bead69c4fee8661464857af300d7d7ed0274cf7beecedc00322e6
      lastState:
        terminated:
          containerID: docker://86c4f11f60ca5dcfc1754b036ae3fe788c0f17f57c9a2057f3de168bfefdbbcb
          exitCode: 2
          finishedAt: "2021-01-14T09:15:10Z"
          reason: Error
          startedAt: "2021-01-14T09:15:10Z"
      name: kubernetes-dashboard
      ready: true
      restartCount: 6
      started: true
      state:
        running:
          startedAt: "2021-01-14T09:18:05Z"
    hostIP: 10.1.11.9
    phase: Running
    podIP: 10.32.0.5
    podIPs:
    - ip: 10.32.0.5
    qosClass: BestEffort
    startTime: "2021-01-12T04:21:09Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-09-14T04:44:40Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-create
      operation: Update
      time: "2020-09-14T04:44:40Z"
    name: srv-jenkins
    namespace: blue
    resourceVersion: "1215592"
    uid: ec6239fc-71da-4abc-ac30-c88f767ded35
  spec:
    clusterIP: 10.102.107.10
    clusterIPs:
    - 10.102.107.10
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: pod-jenkins-deploy
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"details","service":"details"},"name":"details","namespace":"default"},"spec":{"ports":[{"name":"http","port":9080}],"selector":{"app":"details"}}}
    creationTimestamp: "2021-01-13T04:29:07Z"
    labels:
      app: details
      service: details
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:service: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9080,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:07Z"
    name: details
    namespace: default
    resourceVersion: "26896793"
    uid: 8c0df088-fc48-40b4-9c2d-2adf84a99d63
  spec:
    clusterIP: 10.105.59.131
    clusterIPs:
    - 10.105.59.131
    ports:
    - name: http
      port: 9080
      protocol: TCP
      targetPort: 9080
    selector:
      app: details
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-09-08T07:35:35Z"
    labels:
      component: apiserver
      provider: kubernetes
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:component: {}
            f:provider: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kube-apiserver
      operation: Update
      time: "2020-09-08T07:35:35Z"
    name: kubernetes
    namespace: default
    resourceVersion: "157"
    uid: a04e2c26-3782-4e08-bafa-8aca135078d0
  spec:
    clusterIP: 10.96.0.1
    clusterIPs:
    - 10.96.0.1
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 6443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"productpage","service":"productpage"},"name":"productpage","namespace":"default"},"spec":{"ports":[{"name":"http","port":9080}],"selector":{"app":"productpage"}}}
    creationTimestamp: "2021-01-13T04:29:08Z"
    labels:
      app: productpage
      service: productpage
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:service: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9080,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:08Z"
    name: productpage
    namespace: default
    resourceVersion: "26896856"
    uid: b826fd42-c92c-4523-85e9-4cf8677eb0d6
  spec:
    clusterIP: 10.110.124.198
    clusterIPs:
    - 10.110.124.198
    ports:
    - name: http
      port: 9080
      protocol: TCP
      targetPort: 9080
    selector:
      app: productpage
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"ratings","service":"ratings"},"name":"ratings","namespace":"default"},"spec":{"ports":[{"name":"http","port":9080}],"selector":{"app":"ratings"}}}
    creationTimestamp: "2021-01-13T04:29:07Z"
    labels:
      app: ratings
      service: ratings
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:service: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9080,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:07Z"
    name: ratings
    namespace: default
    resourceVersion: "26896809"
    uid: 002a3aa1-ce0e-41cd-a572-4beb39feb6bb
  spec:
    clusterIP: 10.99.211.147
    clusterIPs:
    - 10.99.211.147
    ports:
    - name: http
      port: 9080
      protocol: TCP
      targetPort: 9080
    selector:
      app: ratings
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"reviews","service":"reviews"},"name":"reviews","namespace":"default"},"spec":{"ports":[{"name":"http","port":9080}],"selector":{"app":"reviews"}}}
    creationTimestamp: "2021-01-13T04:29:07Z"
    labels:
      app: reviews
      service: reviews
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:service: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9080,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:07Z"
    name: reviews
    namespace: default
    resourceVersion: "26896828"
    uid: 430029e6-4be7-4a91-86da-79485a906b2f
  spec:
    clusterIP: 10.107.69.111
    clusterIPs:
    - 10.107.69.111
    ports:
    - name: http
      port: 9080
      protocol: TCP
      targetPort: 9080
    selector:
      app: reviews
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/version":"0.41.2","helm.sh/chart":"ingress-nginx-3.10.1"},"name":"ingress-nginx-controller","namespace":"ingress-nginx"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":"http"},{"name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx"},"type":"NodePort"}}
    creationTimestamp: "2020-11-17T10:01:18Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/version: 0.41.2
      helm.sh/chart: ingress-nginx-3.10.1
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-11-17T10:01:18Z"
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "14487013"
    uid: d9d4b932-9432-45af-a860-e02639410e84
  spec:
    clusterIP: 10.104.233.162
    clusterIPs:
    - 10.104.233.162
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 30424
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 31648
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/version":"0.41.2","helm.sh/chart":"ingress-nginx-3.10.1"},"name":"ingress-nginx-controller-admission","namespace":"ingress-nginx"},"spec":{"ports":[{"name":"https-webhook","port":443,"targetPort":"webhook"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx"},"type":"ClusterIP"}}
    creationTimestamp: "2020-11-17T10:01:18Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/version: 0.41.2
      helm.sh/chart: ingress-nginx-3.10.1
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-11-17T10:01:18Z"
    name: ingress-nginx-controller-admission
    namespace: ingress-nginx
    resourceVersion: "14487007"
    uid: e23fbf0b-0663-487a-a3e6-1266813a5515
  spec:
    clusterIP: 10.100.172.132
    clusterIPs:
    - 10.100.172.132
    ports:
    - name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"grafana","app.kubernetes.io/version":"7.2.1","helm.sh/chart":"grafana-5.8.10"},"name":"grafana","namespace":"istio-system"},"spec":{"ports":[{"name":"service","port":3000,"protocol":"TCP","targetPort":3000}],"selector":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/name":"grafana"},"type":"ClusterIP"}}
    creationTimestamp: "2021-01-13T06:11:54Z"
    labels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 7.2.1
      helm.sh/chart: grafana-5.8.10
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":3000,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:54Z"
    name: grafana
    namespace: istio-system
    resourceVersion: "26915346"
    uid: 4958cf47-d846-43d0-b0f7-22e71ea4422d
  spec:
    clusterIP: 10.106.24.78
    clusterIPs:
    - 10.106.24.78
    ports:
    - name: service
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"istio-egressgateway","install.operator.istio.io/owning-resource":"unknown","install.operator.istio.io/owning-resource-namespace":"istio-system","istio":"egressgateway","istio.io/rev":"default","operator.istio.io/component":"EgressGateways","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"1.8.1","release":"istio"},"name":"istio-egressgateway","namespace":"istio-system"},"spec":{"ports":[{"name":"http2","port":80,"protocol":"TCP","targetPort":8080},{"name":"https","port":443,"protocol":"TCP","targetPort":8443},{"name":"tls","port":15443,"protocol":"TCP","targetPort":15443}],"selector":{"app":"istio-egressgateway","istio":"egressgateway"},"type":"ClusterIP"}}
    creationTimestamp: "2021-01-13T02:25:28Z"
    labels:
      app: istio-egressgateway
      install.operator.istio.io/owning-resource: unknown
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio: egressgateway
      istio.io/rev: default
      operator.istio.io/component: EgressGateways
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 1.8.1
      release: istio
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:install.operator.istio.io/owning-resource-namespace: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:operator.istio.io/managed: {}
            f:operator.istio.io/version: {}
            f:release: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":15443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:istio: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: istioctl
      operation: Update
      time: "2021-01-13T02:25:28Z"
    name: istio-egressgateway
    namespace: istio-system
    resourceVersion: "26874974"
    uid: 94f1735c-b705-46de-b128-e260eeeda1bf
  spec:
    clusterIP: 10.99.169.155
    clusterIPs:
    - 10.99.169.155
    ports:
    - name: http2
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
    - name: tls
      port: 15443
      protocol: TCP
      targetPort: 15443
    selector:
      app: istio-egressgateway
      istio: egressgateway
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"istio-ingressgateway","install.operator.istio.io/owning-resource":"unknown","install.operator.istio.io/owning-resource-namespace":"istio-system","istio":"ingressgateway","istio.io/rev":"default","operator.istio.io/component":"IngressGateways","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"1.8.1","release":"istio"},"name":"istio-ingressgateway","namespace":"istio-system"},"spec":{"ports":[{"name":"status-port","port":15021,"protocol":"TCP","targetPort":15021},{"name":"http2","port":80,"protocol":"TCP","targetPort":8080},{"name":"https","port":443,"protocol":"TCP","targetPort":8443},{"name":"tcp","port":31400,"protocol":"TCP","targetPort":31400},{"name":"tls","port":15443,"protocol":"TCP","targetPort":15443}],"selector":{"app":"istio-ingressgateway","istio":"ingressgateway"},"type":"LoadBalancer"}}
    creationTimestamp: "2021-01-13T02:25:28Z"
    labels:
      app: istio-ingressgateway
      install.operator.istio.io/owning-resource: unknown
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio: ingressgateway
      istio.io/rev: default
      operator.istio.io/component: IngressGateways
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 1.8.1
      release: istio
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:install.operator.istio.io/owning-resource-namespace: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:operator.istio.io/managed: {}
            f:operator.istio.io/version: {}
            f:release: {}
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":15021,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":15443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":31400,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:istio: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: istioctl
      operation: Update
      time: "2021-01-13T02:25:28Z"
    name: istio-ingressgateway
    namespace: istio-system
    resourceVersion: "26874980"
    uid: 3fadd6f6-243d-4f41-a566-6a196e6b8fd8
  spec:
    clusterIP: 10.96.78.29
    clusterIPs:
    - 10.96.78.29
    externalTrafficPolicy: Cluster
    ports:
    - name: status-port
      nodePort: 30564
      port: 15021
      protocol: TCP
      targetPort: 15021
    - name: http2
      nodePort: 32330
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      nodePort: 32761
      port: 443
      protocol: TCP
      targetPort: 8443
    - name: tcp
      nodePort: 32742
      port: 31400
      protocol: TCP
      targetPort: 31400
    - name: tls
      nodePort: 32720
      port: 15443
      protocol: TCP
      targetPort: 15443
    selector:
      app: istio-ingressgateway
      istio: ingressgateway
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"istiod","install.operator.istio.io/owning-resource":"unknown","install.operator.istio.io/owning-resource-namespace":"istio-system","istio":"pilot","istio.io/rev":"default","operator.istio.io/component":"Pilot","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"1.8.1","release":"istio"},"name":"istiod","namespace":"istio-system"},"spec":{"ports":[{"name":"grpc-xds","port":15010,"protocol":"TCP"},{"name":"https-dns","port":15012,"protocol":"TCP"},{"name":"https-webhook","port":443,"protocol":"TCP","targetPort":15017},{"name":"http-monitoring","port":15014,"protocol":"TCP"}],"selector":{"app":"istiod","istio":"pilot"}}}
    creationTimestamp: "2021-01-13T02:25:01Z"
    labels:
      app: istiod
      install.operator.istio.io/owning-resource: unknown
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio: pilot
      istio.io/rev: default
      operator.istio.io/component: Pilot
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 1.8.1
      release: istio
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:install.operator.istio.io/owning-resource-namespace: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:operator.istio.io/managed: {}
            f:operator.istio.io/version: {}
            f:release: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":15010,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":15012,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":15014,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:istio: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: istioctl
      operation: Update
      time: "2021-01-13T02:25:01Z"
    name: istiod
    namespace: istio-system
    resourceVersion: "26874835"
    uid: 4a314304-aaff-4a64-9c25-3897059609e1
  spec:
    clusterIP: 10.96.119.220
    clusterIPs:
    - 10.96.119.220
    ports:
    - name: grpc-xds
      port: 15010
      protocol: TCP
      targetPort: 15010
    - name: https-dns
      port: 15012
      protocol: TCP
      targetPort: 15012
    - name: https-webhook
      port: 443
      protocol: TCP
      targetPort: 15017
    - name: http-monitoring
      port: 15014
      protocol: TCP
      targetPort: 15014
    selector:
      app: istiod
      istio: pilot
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"jaeger"},"name":"jaeger-collector","namespace":"istio-system"},"spec":{"ports":[{"name":"jaeger-collector-http","port":14268,"protocol":"TCP","targetPort":14268},{"name":"jaeger-collector-grpc","port":14250,"protocol":"TCP","targetPort":14250}],"selector":{"app":"jaeger"},"type":"ClusterIP"}}
    creationTimestamp: "2021-01-13T06:11:55Z"
    labels:
      app: jaeger
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":14250,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":14268,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:55Z"
    name: jaeger-collector
    namespace: istio-system
    resourceVersion: "26915387"
    uid: 0618bed0-d591-4a5a-a969-2f2f29262056
  spec:
    clusterIP: 10.106.215.254
    clusterIPs:
    - 10.106.215.254
    ports:
    - name: jaeger-collector-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-collector-grpc
      port: 14250
      protocol: TCP
      targetPort: 14250
    selector:
      app: jaeger
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kiali.io/api-spec: https://kiali.io/api
      kiali.io/api-type: rest
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"kiali.io/api-spec":"https://kiali.io/api","kiali.io/api-type":"rest"},"labels":{"app":"kiali","app.kubernetes.io/instance":"kiali-server","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"kiali","app.kubernetes.io/version":"v1.26.0","helm.sh/chart":"kiali-server-1.26.0","version":"v1.26.0"},"name":"kiali","namespace":"istio-system"},"spec":{"ports":[{"name":"http","port":20001,"protocol":"TCP"},{"name":"http-metrics","port":9090,"protocol":"TCP"}],"selector":{"app.kubernetes.io/instance":"kiali-server","app.kubernetes.io/name":"kiali"}}}
    creationTimestamp: "2021-01-13T06:11:55Z"
    labels:
      app: kiali
      app.kubernetes.io/instance: kiali-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kiali
      app.kubernetes.io/version: v1.26.0
      helm.sh/chart: kiali-server-1.26.0
      version: v1.26.0
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kiali.io/api-spec: {}
            f:kiali.io/api-type: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:version: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9090,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":20001,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
          f:sessionAffinity: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:55Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:type: {}
      manager: kubectl-edit
      operation: Update
      time: "2021-01-13T06:32:05Z"
    name: kiali
    namespace: istio-system
    resourceVersion: "26919091"
    uid: 58e2a4fb-809f-4d45-a727-37947c9d227c
  spec:
    clusterIP: 10.106.235.188
    clusterIPs:
    - 10.106.235.188
    externalTrafficPolicy: Cluster
    ports:
    - name: http
      nodePort: 31544
      port: 20001
      protocol: TCP
      targetPort: 20001
    - name: http-metrics
      nodePort: 30248
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      app.kubernetes.io/instance: kiali-server
      app.kubernetes.io/name: kiali
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"prometheus","chart":"prometheus-11.16.2","component":"server","heritage":"Helm","release":"prometheus"},"name":"prometheus","namespace":"istio-system"},"spec":{"ports":[{"name":"http","port":9090,"protocol":"TCP","targetPort":9090}],"selector":{"app":"prometheus","component":"server","release":"prometheus"},"sessionAffinity":"None","type":"ClusterIP"}}
    creationTimestamp: "2021-01-13T06:11:56Z"
    labels:
      app: prometheus
      chart: prometheus-11.16.2
      component: server
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9090,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:component: {}
            f:release: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:56Z"
    name: prometheus
    namespace: istio-system
    resourceVersion: "26915436"
    uid: ad18cb2f-f6c0-40eb-b911-f15e24617323
  spec:
    clusterIP: 10.107.53.143
    clusterIPs:
    - 10.107.53.143
    ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      app: prometheus
      component: server
      release: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"jaeger"},"name":"tracing","namespace":"istio-system"},"spec":{"ports":[{"name":"http-query","port":80,"protocol":"TCP","targetPort":16686}],"selector":{"app":"jaeger"},"type":"ClusterIP"}}
    creationTimestamp: "2021-01-13T06:11:55Z"
    labels:
      app: jaeger
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:55Z"
    name: tracing
    namespace: istio-system
    resourceVersion: "26915376"
    uid: a2a6e778-93db-455f-9557-c5c0deed1d68
  spec:
    clusterIP: 10.97.33.99
    clusterIPs:
    - 10.97.33.99
    ports:
    - name: http-query
      port: 80
      protocol: TCP
      targetPort: 16686
    selector:
      app: jaeger
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"name":"zipkin"},"name":"zipkin","namespace":"istio-system"},"spec":{"ports":[{"name":"http-query","port":9411,"targetPort":9411}],"selector":{"app":"jaeger"}}}
    creationTimestamp: "2021-01-13T06:11:55Z"
    labels:
      name: zipkin
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:name: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":9411,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:55Z"
    name: zipkin
    namespace: istio-system
    resourceVersion: "26915383"
    uid: 6764ce28-455b-4279-9fb0-a8b78c2431d1
  spec:
    clusterIP: 10.108.170.113
    clusterIPs:
    - 10.108.170.113
    ports:
    - name: http-query
      port: 9411
      protocol: TCP
      targetPort: 9411
    selector:
      app: jaeger
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2020-09-08T07:35:37Z"
    labels:
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: KubeDNS
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":53,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":53,"protocol":"UDP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":9153,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubeadm
      operation: Update
      time: "2020-09-08T07:35:37Z"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "27204153"
    uid: 45883943-68bf-4044-8c1b-b4f505a02549
  spec:
    clusterIP: 10.96.0.10
    clusterIPs:
    - 10.96.0.10
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"kubernetes.io/cluster-service":"true","kubernetes.io/name":"Metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"ports":[{"port":443,"protocol":"TCP","targetPort":"main-port"}],"selector":{"k8s-app":"metrics-server"}}}
    creationTimestamp: "2020-09-17T06:12:17Z"
    labels:
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: Metrics-server
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:kubernetes.io/cluster-service: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-09-17T06:12:17Z"
    name: metrics-server
    namespace: kube-system
    resourceVersion: "1847880"
    uid: 357d9cc1-ad41-4da6-ad1c-022d05c77e4d
  spec:
    clusterIP: 10.103.241.166
    clusterIPs:
    - 10.103.241.166
    ports:
    - port: 443
      protocol: TCP
      targetPort: main-port
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"k8s-app":"dashboard-metrics-scraper"},"name":"dashboard-metrics-scraper","namespace":"kubernetes-dashboard"},"spec":{"ports":[{"port":8000,"targetPort":8000}],"selector":{"k8s-app":"dashboard-metrics-scraper"}}}
    creationTimestamp: "2021-01-12T04:21:09Z"
    labels:
      k8s-app: dashboard-metrics-scraper
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":8000,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-12T04:21:09Z"
    name: dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "26673269"
    uid: 08929691-cfe1-419f-a9e9-bc3078b9cae8
  spec:
    clusterIP: 10.104.250.133
    clusterIPs:
    - 10.104.250.133
    ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      k8s-app: dashboard-metrics-scraper
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard","namespace":"kubernetes-dashboard"},"spec":{"ports":[{"port":443,"targetPort":8443}],"selector":{"k8s-app":"kubernetes-dashboard"}}}
    creationTimestamp: "2021-01-12T04:21:09Z"
    labels:
      k8s-app: kubernetes-dashboard
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-12T04:21:09Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:type: {}
      manager: kubectl-edit
      operation: Update
      time: "2021-01-12T04:21:45Z"
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
    resourceVersion: "26673399"
    uid: 00151b48-dead-4910-b3ab-e0daf6584ec3
  spec:
    clusterIP: 10.103.61.225
    clusterIPs:
    - 10.103.61.225
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 30302
      port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      k8s-app: kubernetes-dashboard
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
    creationTimestamp: "2020-09-08T07:35:37Z"
    generation: 2
    labels:
      k8s-app: kube-proxy
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/kube-proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
        f:status:
          f:desiredNumberScheduled: {}
      manager: kubeadm
      operation: Update
      time: "2021-01-14T09:29:33Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:30:46Z"
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "27204487"
    uid: 03a3fd1a-2b51-4bc8-9591-0a9e30cdc818
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        containers:
        - command:
          - /usr/local/bin/kube-proxy
          - --config=/var/lib/kube-proxy/config.conf
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: k8s.gcr.io/kube-proxy:v1.20.0
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kube-proxy
            name: kube-proxy
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kube-proxy
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 2
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/net.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjAiLCBHaXRDb21taXQ6ImUxOTk2NDE4MzM3N2QwZWMyMDUyZDFmMWZhOTMwYzRkNzU3NWJkNTAiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA4LTI2VDE0OjMwOjMzWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjAiLCBHaXRDb21taXQ6ImUxOTk2NDE4MzM3N2QwZWMyMDUyZDFmMWZhOTMwYzRkNzU3NWJkNTAiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA4LTI2VDE0OjIzOjA0WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K",
            "date": "Tue Sep 08 2020 07:46:12 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{"cloud.weave.works/launcher-info":"{\n  \"original-request\": {\n    \"url\": \"/k8s/v1.16/net.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjAiLCBHaXRDb21taXQ6ImUxOTk2NDE4MzM3N2QwZWMyMDUyZDFmMWZhOTMwYzRkNzU3NWJkNTAiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA4LTI2VDE0OjMwOjMzWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjAiLCBHaXRDb21taXQ6ImUxOTk2NDE4MzM3N2QwZWMyMDUyZDFmMWZhOTMwYzRkNzU3NWJkNTAiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA4LTI2VDE0OjIzOjA0WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K\",\n    \"date\": \"Tue Sep 08 2020 07:46:12 GMT+0000 (UTC)\"\n  },\n  \"email-address\": \"support@weave.works\"\n}"},"labels":{"name":"weave-net"},"name":"weave-net","namespace":"kube-system"},"spec":{"minReadySeconds":5,"selector":{"matchLabels":{"name":"weave-net"}},"template":{"metadata":{"labels":{"name":"weave-net"}},"spec":{"containers":[{"command":["/home/weave/launch.sh"],"env":[{"name":"HOSTNAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}}],"image":"docker.io/weaveworks/weave-kube:2.7.0","name":"weave","readinessProbe":{"httpGet":{"host":"127.0.0.1","path":"/status","port":6784}},"resources":{"requests":{"cpu":"50m","memory":"100Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/weavedb","name":"weavedb"},{"mountPath":"/host/opt","name":"cni-bin"},{"mountPath":"/host/home","name":"cni-bin2"},{"mountPath":"/host/etc","name":"cni-conf"},{"mountPath":"/host/var/lib/dbus","name":"dbus"},{"mountPath":"/lib/modules","name":"lib-modules"},{"mountPath":"/run/xtables.lock","name":"xtables-lock"}]},{"env":[{"name":"HOSTNAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}}],"image":"docker.io/weaveworks/weave-npc:2.7.0","name":"weave-npc","resources":{"requests":{"cpu":"50m","memory":"100Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/run/xtables.lock","name":"xtables-lock"}]}],"dnsPolicy":"ClusterFirstWithHostNet","hostNetwork":true,"hostPID":true,"priorityClassName":"system-node-critical","restartPolicy":"Always","securityContext":{"seLinuxOptions":{}},"serviceAccountName":"weave-net","tolerations":[{"effect":"NoSchedule","operator":"Exists"},{"effect":"NoExecute","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/lib/weave"},"name":"weavedb"},{"hostPath":{"path":"/opt"},"name":"cni-bin"},{"hostPath":{"path":"/home"},"name":"cni-bin2"},{"hostPath":{"path":"/etc"},"name":"cni-conf"},{"hostPath":{"path":"/var/lib/dbus"},"name":"dbus"},{"hostPath":{"path":"/lib/modules"},"name":"lib-modules"},{"hostPath":{"path":"/run/xtables.lock","type":"FileOrCreate"},"name":"xtables-lock"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2020-09-08T07:46:13Z"
    generation: 1
    labels:
      name: weave-net
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:name: {}
        f:spec:
          f:minReadySeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:name: {}
            f:spec:
              f:containers:
                k:{"name":"weave"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"HOSTNAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/etc"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/home"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/opt"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/var/lib/dbus"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/weavedb"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"weave-npc"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"HOSTNAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:hostPID: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:seLinuxOptions: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"cni-bin"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"cni-bin2"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"cni-conf"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"dbus"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"weavedb"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-09-08T07:46:13Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:58:24Z"
    name: weave-net
    namespace: kube-system
    resourceVersion: "27208542"
    uid: 7b585268-9450-4428-b810-350224f9dfa1
  spec:
    minReadySeconds: 5
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: weave-net
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: weave-net
      spec:
        containers:
        - command:
          - /home/weave/launch.sh
          env:
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: docker.io/weaveworks/weave-kube:2.7.0
          imagePullPolicy: IfNotPresent
          name: weave
          readinessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /status
              port: 6784
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /weavedb
            name: weavedb
          - mountPath: /host/opt
            name: cni-bin
          - mountPath: /host/home
            name: cni-bin2
          - mountPath: /host/etc
            name: cni-conf
          - mountPath: /host/var/lib/dbus
            name: dbus
          - mountPath: /lib/modules
            name: lib-modules
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - env:
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: docker.io/weaveworks/weave-npc:2.7.0
          imagePullPolicy: IfNotPresent
          name: weave-npc
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /run/xtables.lock
            name: xtables-lock
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        hostPID: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seLinuxOptions: {}
        serviceAccount: weave-net
        serviceAccountName: weave-net
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/weave
            type: ""
          name: weavedb
        - hostPath:
            path: /opt
            type: ""
          name: cni-bin
        - hostPath:
            path: /home
            type: ""
          name: cni-bin2
        - hostPath:
            path: /etc
            type: ""
          name: cni-conf
        - hostPath:
            path: /var/lib/dbus
            type: ""
          name: dbus
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-09-14T04:44:40Z"
    generation: 1
    labels:
      app: pod-jenkins-deploy
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"jenkins"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-create
      operation: Update
      time: "2020-09-14T04:44:40Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:19:14Z"
    name: pod-jenkins-deploy
    namespace: blue
    resourceVersion: "27181076"
    uid: c3582cac-1fe5-44d7-b49b-8419d8a98e9d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: pod-jenkins-deploy
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pod-jenkins-deploy
      spec:
        containers:
        - image: jenkins
          imagePullPolicy: Always
          name: jenkins
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2020-09-14T04:44:40Z"
      lastUpdateTime: "2020-09-14T04:44:45Z"
      message: ReplicaSet "pod-jenkins-deploy-6c8f5b65cb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T07:19:14Z"
      lastUpdateTime: "2021-01-14T07:19:14Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"details","version":"v1"},"name":"details-v1","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"details","version":"v1"}},"template":{"metadata":{"labels":{"app":"details","version":"v1"}},"spec":{"containers":[{"image":"docker.io/istio/examples-bookinfo-details-v1:1.16.2","imagePullPolicy":"IfNotPresent","name":"details","ports":[{"containerPort":9080}]}],"serviceAccountName":"bookinfo-details"}}}}
    creationTimestamp: "2021-01-13T04:29:07Z"
    generation: 1
    labels:
      app: details
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:version: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"details"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:07Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:30:27Z"
    name: details-v1
    namespace: default
    resourceVersion: "26897229"
    uid: d66c0690-ba90-4955-bfd4-79819eb1a170
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: details
        version: v1
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: details
          version: v1
      spec:
        containers:
        - image: docker.io/istio/examples-bookinfo-details-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: details
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-details
        serviceAccountName: bookinfo-details
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T04:30:27Z"
      lastUpdateTime: "2021-01-13T04:30:27Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T04:29:07Z"
      lastUpdateTime: "2021-01-13T04:30:27Z"
      message: ReplicaSet "details-v1-79c697d759" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-14T07:51:19Z"
    generation: 2
    labels:
      app: http-go
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"http-go"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-create
      operation: Update
      time: "2021-01-14T07:51:19Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:replicas: {}
      manager: kubectl-edit
      operation: Update
      time: "2021-01-14T07:53:19Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:43:21Z"
    name: http-go
    namespace: default
    resourceVersion: "27206649"
    uid: dcbe015d-5a37-4786-a8b6-8aabe20c674d
  spec:
    progressDeadlineSeconds: 600
    replicas: 10
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: http-go
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: http-go
      spec:
        containers:
        - image: gasbugs/http-go
          imagePullPolicy: Always
          name: http-go
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 10
    conditions:
    - lastTransitionTime: "2021-01-14T07:51:19Z"
      lastUpdateTime: "2021-01-14T07:51:31Z"
      message: ReplicaSet "http-go-568f649bb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T09:43:14Z"
      lastUpdateTime: "2021-01-14T09:43:14Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 10
    replicas: 10
    updatedReplicas: 10
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"productpage","version":"v1"},"name":"productpage-v1","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"productpage","version":"v1"}},"template":{"metadata":{"labels":{"app":"productpage","version":"v1"}},"spec":{"containers":[{"image":"docker.io/istio/examples-bookinfo-productpage-v1:1.16.2","imagePullPolicy":"IfNotPresent","name":"productpage","ports":[{"containerPort":9080}],"volumeMounts":[{"mountPath":"/tmp","name":"tmp"}]}],"serviceAccountName":"bookinfo-productpage","volumes":[{"emptyDir":{},"name":"tmp"}]}}}}
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: productpage
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"productpage"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:08Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:58Z"
    name: productpage-v1
    namespace: default
    resourceVersion: "27206544"
    uid: e02c4b72-fc31-4d4b-8623-31295cb2deec
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: productpage
        version: v1
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: productpage
          version: v1
      spec:
        containers:
        - image: docker.io/istio/examples-bookinfo-productpage-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: productpage
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-productpage
        serviceAccountName: bookinfo-productpage
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T04:29:08Z"
      lastUpdateTime: "2021-01-13T04:30:05Z"
      message: ReplicaSet "productpage-v1-65576bb7bf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T09:42:58Z"
      lastUpdateTime: "2021-01-14T09:42:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"ratings","version":"v1"},"name":"ratings-v1","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"ratings","version":"v1"}},"template":{"metadata":{"labels":{"app":"ratings","version":"v1"}},"spec":{"containers":[{"image":"docker.io/istio/examples-bookinfo-ratings-v1:1.16.2","imagePullPolicy":"IfNotPresent","name":"ratings","ports":[{"containerPort":9080}]}],"serviceAccountName":"bookinfo-ratings"}}}}
    creationTimestamp: "2021-01-13T04:29:07Z"
    generation: 1
    labels:
      app: ratings
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"ratings"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:07Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:43:01Z"
    name: ratings-v1
    namespace: default
    resourceVersion: "27206556"
    uid: 994f57de-3cdb-410a-90da-e826a9fe5227
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ratings
        version: v1
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ratings
          version: v1
      spec:
        containers:
        - image: docker.io/istio/examples-bookinfo-ratings-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: ratings
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-ratings
        serviceAccountName: bookinfo-ratings
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T04:29:07Z"
      lastUpdateTime: "2021-01-13T04:30:43Z"
      message: ReplicaSet "ratings-v1-7d99676f7f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T09:43:01Z"
      lastUpdateTime: "2021-01-14T09:43:01Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"reviews","version":"v1"},"name":"reviews-v1","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"reviews","version":"v1"}},"template":{"metadata":{"labels":{"app":"reviews","version":"v1"}},"spec":{"containers":[{"env":[{"name":"LOG_DIR","value":"/tmp/logs"}],"image":"docker.io/istio/examples-bookinfo-reviews-v1:1.16.2","imagePullPolicy":"IfNotPresent","name":"reviews","ports":[{"containerPort":9080}],"volumeMounts":[{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/opt/ibm/wlp/output","name":"wlp-output"}]}],"serviceAccountName":"bookinfo-reviews","volumes":[{"emptyDir":{},"name":"wlp-output"},{"emptyDir":{},"name":"tmp"}]}}}}
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: reviews
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:version: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"reviews"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"LOG_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/ibm/wlp/output"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wlp-output"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:08Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:30:32Z"
    name: reviews-v1
    namespace: default
    resourceVersion: "26897264"
    uid: 012dc15e-4dfc-476e-864a-eed75f1da121
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: reviews
        version: v1
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reviews
          version: v1
      spec:
        containers:
        - env:
          - name: LOG_DIR
            value: /tmp/logs
          image: docker.io/istio/examples-bookinfo-reviews-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: reviews
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /opt/ibm/wlp/output
            name: wlp-output
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-reviews
        serviceAccountName: bookinfo-reviews
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: wlp-output
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T04:30:32Z"
      lastUpdateTime: "2021-01-13T04:30:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T04:29:08Z"
      lastUpdateTime: "2021-01-13T04:30:32Z"
      message: ReplicaSet "reviews-v1-987d495c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"reviews","version":"v2"},"name":"reviews-v2","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"reviews","version":"v2"}},"template":{"metadata":{"labels":{"app":"reviews","version":"v2"}},"spec":{"containers":[{"env":[{"name":"LOG_DIR","value":"/tmp/logs"}],"image":"docker.io/istio/examples-bookinfo-reviews-v2:1.16.2","imagePullPolicy":"IfNotPresent","name":"reviews","ports":[{"containerPort":9080}],"volumeMounts":[{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/opt/ibm/wlp/output","name":"wlp-output"}]}],"serviceAccountName":"bookinfo-reviews","volumes":[{"emptyDir":{},"name":"wlp-output"},{"emptyDir":{},"name":"tmp"}]}}}}
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: reviews
      version: v2
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"reviews"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"LOG_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/ibm/wlp/output"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wlp-output"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:08Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:43:09Z"
    name: reviews-v2
    namespace: default
    resourceVersion: "27206595"
    uid: a9ac8d9c-2774-4087-8ba7-e2f1da4bc308
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: reviews
        version: v2
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reviews
          version: v2
      spec:
        containers:
        - env:
          - name: LOG_DIR
            value: /tmp/logs
          image: docker.io/istio/examples-bookinfo-reviews-v2:1.16.2
          imagePullPolicy: IfNotPresent
          name: reviews
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /opt/ibm/wlp/output
            name: wlp-output
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-reviews
        serviceAccountName: bookinfo-reviews
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: wlp-output
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T04:29:08Z"
      lastUpdateTime: "2021-01-13T04:30:45Z"
      message: ReplicaSet "reviews-v2-6c5bf657cf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T09:43:09Z"
      lastUpdateTime: "2021-01-14T09:43:09Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"reviews","version":"v3"},"name":"reviews-v3","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"reviews","version":"v3"}},"template":{"metadata":{"labels":{"app":"reviews","version":"v3"}},"spec":{"containers":[{"env":[{"name":"LOG_DIR","value":"/tmp/logs"}],"image":"docker.io/istio/examples-bookinfo-reviews-v3:1.16.2","imagePullPolicy":"IfNotPresent","name":"reviews","ports":[{"containerPort":9080}],"volumeMounts":[{"mountPath":"/tmp","name":"tmp"},{"mountPath":"/opt/ibm/wlp/output","name":"wlp-output"}]}],"serviceAccountName":"bookinfo-reviews","volumes":[{"emptyDir":{},"name":"wlp-output"},{"emptyDir":{},"name":"tmp"}]}}}}
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: reviews
      version: v3
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:version: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"reviews"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"LOG_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/ibm/wlp/output"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wlp-output"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T04:29:08Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:30:30Z"
    name: reviews-v3
    namespace: default
    resourceVersion: "26897251"
    uid: 7a9b832b-4fe6-4fce-b991-69f4a1b56ff1
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: reviews
        version: v3
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reviews
          version: v3
      spec:
        containers:
        - env:
          - name: LOG_DIR
            value: /tmp/logs
          image: docker.io/istio/examples-bookinfo-reviews-v3:1.16.2
          imagePullPolicy: IfNotPresent
          name: reviews
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /opt/ibm/wlp/output
            name: wlp-output
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-reviews
        serviceAccountName: bookinfo-reviews
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: wlp-output
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T04:30:30Z"
      lastUpdateTime: "2021-01-13T04:30:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T04:29:08Z"
      lastUpdateTime: "2021-01-13T04:30:30Z"
      message: ReplicaSet "reviews-v3-5f7b9f4f77" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: es-operator
      meta.helm.sh/release-namespace: efk-logging
    creationTimestamp: "2021-01-12T08:26:13Z"
    generation: 1
    labels:
      app: elasticsearch-operator
      app.kubernetes.io/managed-by: Helm
      chart: elasticsearch-operator-0.1.7
      heritage: Helm
      release: es-operator
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"elasticsearch-operator"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-01-12T08:26:13Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-12T08:26:31Z"
    name: es-operator-elasticsearch-operator
    namespace: efk-logging
    resourceVersion: "26710718"
    uid: 17d50e83-5042-4d85-9d4c-6d108cfc876a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: elasticsearch-operator
        release: es-operator
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: elasticsearch-operator
          release: es-operator
      spec:
        containers:
        - args:
          - -c
          - /usr/local/bin/elasticsearch-operator -initDaemonsetNamespace $(NAMESPACE)
          command:
          - /bin/sh
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: upmcenterprises/elasticsearch-operator:0.3.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /live
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: elasticsearch-operator
          ports:
          - containerPort: 8000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: es-operator-elasticsearch-operator
        serviceAccountName: es-operator-elasticsearch-operator
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-12T08:26:31Z"
      lastUpdateTime: "2021-01-12T08:26:31Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-12T08:26:13Z"
      lastUpdateTime: "2021-01-12T08:26:31Z"
      message: ReplicaSet "es-operator-elasticsearch-operator-575d9966bc" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-09-11T06:25:23Z"
    generation: 1
    labels:
      app: runner-gitlab-runner
      chart: gitlab-runner-0.19.3
      heritage: Tiller
      release: runner
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:checksum/configmap: {}
                f:checksum/secrets: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"runner-gitlab-runner"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CI_SERVER_URL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CLONE_URL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_IMAGE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_POLL_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PRIVILEGED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"REGISTER_LOCKED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_EXECUTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_OUTPUT_LIMIT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_REQUEST_CONCURRENCY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_TAG_LIST"}:
                      .: {}
                      f:name: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9252,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/gitlab-runner/.gitlab-runner"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/scripts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"configure"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CI_SERVER_URL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CLONE_URL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_IMAGE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_POLL_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PRIVILEGED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"REGISTER_LOCKED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_EXECUTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_OUTPUT_LIMIT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_REQUEST_CONCURRENCY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_TAG_LIST"}:
                      .: {}
                      f:name: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/init-secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"etc-gitlab-runner"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                  f:name: {}
                k:{"name":"init-runner-secrets"}:
                  .: {}
                  f:name: {}
                  f:projected:
                    .: {}
                    f:defaultMode: {}
                    f:sources: {}
                k:{"name":"runner-secrets"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                  f:name: {}
                k:{"name":"scripts"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2020-09-11T06:25:23Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:20:06Z"
    name: runner-gitlab-runner
    namespace: gitlab-managed-apps
    resourceVersion: "27181434"
    uid: 47388c7c-4dc2-4b18-8486-cd73a80852cf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: runner-gitlab-runner
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/configmap: 04e5ccf37e4130439017b11d463d699a987c43a7845ddd4fad551b4226055def
          checksum/secrets: 1187decf4242a376b96abd5abd06404313fb5368132d9bc3bc48f6fab25dfada
          prometheus.io/port: "9252"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: runner-gitlab-runner
          chart: gitlab-runner-0.19.3
          heritage: Tiller
          release: runner
      spec:
        containers:
        - command:
          - /bin/bash
          - /scripts/entrypoint
          env:
          - name: CI_SERVER_URL
            value: http://20.194.41.47:31111/
          - name: CLONE_URL
          - name: RUNNER_REQUEST_CONCURRENCY
            value: "1"
          - name: RUNNER_EXECUTOR
            value: kubernetes
          - name: REGISTER_LOCKED
            value: "true"
          - name: RUNNER_TAG_LIST
          - name: RUNNER_OUTPUT_LIMIT
            value: "4096"
          - name: KUBERNETES_IMAGE
            value: ubuntu:16.04
          - name: KUBERNETES_PRIVILEGED
            value: "true"
          - name: KUBERNETES_NAMESPACE
            value: gitlab-managed-apps
          - name: KUBERNETES_POLL_TIMEOUT
            value: "180"
          - name: KUBERNETES_CPU_LIMIT
          - name: KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_LIMIT
          - name: KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_CPU_REQUEST
          - name: KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_REQUEST
          - name: KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_SERVICE_ACCOUNT
          - name: KUBERNETES_SERVICE_CPU_LIMIT
          - name: KUBERNETES_SERVICE_MEMORY_LIMIT
          - name: KUBERNETES_SERVICE_CPU_REQUEST
          - name: KUBERNETES_SERVICE_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_CPU_LIMIT
          - name: KUBERNETES_HELPER_MEMORY_LIMIT
          - name: KUBERNETES_HELPER_CPU_REQUEST
          - name: KUBERNETES_HELPER_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_IMAGE
          - name: KUBERNETES_PULL_POLICY
          image: gitlab/gitlab-runner:alpine-v13.2.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - /scripts/check-live
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: runner-gitlab-runner
          ports:
          - containerPort: 9252
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/bin/pgrep
              - gitlab.*runner
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secrets
            name: runner-secrets
          - mountPath: /home/gitlab-runner/.gitlab-runner
            name: etc-gitlab-runner
          - mountPath: /scripts
            name: scripts
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - /config/configure
          env:
          - name: CI_SERVER_URL
            value: http://20.194.41.47:31111/
          - name: CLONE_URL
          - name: RUNNER_REQUEST_CONCURRENCY
            value: "1"
          - name: RUNNER_EXECUTOR
            value: kubernetes
          - name: REGISTER_LOCKED
            value: "true"
          - name: RUNNER_TAG_LIST
          - name: RUNNER_OUTPUT_LIMIT
            value: "4096"
          - name: KUBERNETES_IMAGE
            value: ubuntu:16.04
          - name: KUBERNETES_PRIVILEGED
            value: "true"
          - name: KUBERNETES_NAMESPACE
            value: gitlab-managed-apps
          - name: KUBERNETES_POLL_TIMEOUT
            value: "180"
          - name: KUBERNETES_CPU_LIMIT
          - name: KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_LIMIT
          - name: KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_CPU_REQUEST
          - name: KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_REQUEST
          - name: KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_SERVICE_ACCOUNT
          - name: KUBERNETES_SERVICE_CPU_LIMIT
          - name: KUBERNETES_SERVICE_MEMORY_LIMIT
          - name: KUBERNETES_SERVICE_CPU_REQUEST
          - name: KUBERNETES_SERVICE_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_CPU_LIMIT
          - name: KUBERNETES_HELPER_MEMORY_LIMIT
          - name: KUBERNETES_HELPER_CPU_REQUEST
          - name: KUBERNETES_HELPER_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_IMAGE
          - name: KUBERNETES_PULL_POLICY
          image: gitlab/gitlab-runner:alpine-v13.2.3
          imagePullPolicy: IfNotPresent
          name: configure
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secrets
            name: runner-secrets
          - mountPath: /config
            name: scripts
            readOnly: true
          - mountPath: /init-secrets
            name: init-runner-secrets
            readOnly: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65533
          runAsUser: 100
        serviceAccount: runner-gitlab-runner
        serviceAccountName: runner-gitlab-runner
        terminationGracePeriodSeconds: 3600
        volumes:
        - emptyDir:
            medium: Memory
          name: runner-secrets
        - emptyDir:
            medium: Memory
          name: etc-gitlab-runner
        - name: init-runner-secrets
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: runner-registration-token
                  path: runner-registration-token
                - key: runner-token
                  path: runner-token
                name: runner-gitlab-runner
        - configMap:
            defaultMode: 420
            name: runner-gitlab-runner
          name: scripts
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-09-11T06:25:23Z"
      lastUpdateTime: "2020-09-11T06:26:02Z"
      message: ReplicaSet "runner-gitlab-runner-69779496d5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T07:20:06Z"
      lastUpdateTime: "2021-01-14T07:20:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/version":"0.41.2","helm.sh/chart":"ingress-nginx-3.10.1"},"name":"ingress-nginx-controller","namespace":"ingress-nginx"},"spec":{"minReadySeconds":0,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx"}},"spec":{"containers":[{"args":["/nginx-ingress-controller","--election-id=ingress-controller-leader","--ingress-class=nginx","--configmap=$(POD_NAMESPACE)/ingress-nginx-controller","--validating-webhook=:8443","--validating-webhook-certificate=/usr/local/certificates/cert","--validating-webhook-key=/usr/local/certificates/key"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"LD_PRELOAD","value":"/usr/local/lib/libmimalloc.so"}],"image":"k8s.gcr.io/ingress-nginx/controller:v0.41.2@sha256:1f4f402b9c14f3ae92b11ada1dfe9893a88f0faeb0b2f4b903e2c67a0c3bf0de","imagePullPolicy":"IfNotPresent","lifecycle":{"preStop":{"exec":{"command":["/wait-shutdown"]}}},"livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":80,"name":"http","protocol":"TCP"},{"containerPort":443,"name":"https","protocol":"TCP"},{"containerPort":8443,"name":"webhook","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"requests":{"cpu":"100m","memory":"90Mi"}},"securityContext":{"allowPrivilegeEscalation":true,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["ALL"]},"runAsUser":101},"volumeMounts":[{"mountPath":"/usr/local/certificates/","name":"webhook-cert","readOnly":true}]}],"dnsPolicy":"ClusterFirst","nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"ingress-nginx","terminationGracePeriodSeconds":300,"volumes":[{"name":"webhook-cert","secret":{"secretName":"ingress-nginx-admission"}}]}}}}
    creationTimestamp: "2020-11-17T10:01:18Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/version: 0.41.2
      helm.sh/chart: ingress-nginx-3.10.1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app.kubernetes.io/component: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/name: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
            f:spec:
              f:containers:
                k:{"name":"controller"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"LD_PRELOAD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/usr/local/certificates/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"webhook-cert"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-11-17T10:01:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-17T10:01:42Z"
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "14487158"
    uid: dd00d677-9090-4454-9037-3c565e3ae51a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --election-id=ingress-controller-leader
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: k8s.gcr.io/ingress-nginx/controller:v0.41.2@sha256:1f4f402b9c14f3ae92b11ada1dfe9893a88f0faeb0b2f4b903e2c67a0c3bf0de
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-11-17T10:01:42Z"
      lastUpdateTime: "2020-11-17T10:01:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-11-17T10:01:18Z"
      lastUpdateTime: "2020-11-17T10:01:42Z"
      message: ReplicaSet "ingress-nginx-controller-5dbd9649d4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"grafana","app.kubernetes.io/version":"7.2.1","helm.sh/chart":"grafana-5.8.10"},"name":"grafana","namespace":"istio-system"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/name":"grafana"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"checksum/config":"d2485b1ee9f9be63381c231826a43742bb10ebac2964bdc3f22a100eab9d032c","checksum/dashboards-json-config":"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b","checksum/sc-dashboard-provider-config":"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b","sidecar.istio.io/inject":"false"},"labels":{"app":"grafana","app.kubernetes.io/instance":"grafana","app.kubernetes.io/name":"grafana"}},"spec":{"containers":[{"env":[{"name":"GF_AUTH_ANONYMOUS_ENABLED","value":"true"},{"name":"GF_AUTH_ANONYMOUS_ORG_ROLE","value":"Admin"},{"name":"GF_AUTH_BASIC_ENABLED","value":"false"},{"name":"GF_SECURITY_ADMIN_PASSWORD","value":"-"},{"name":"GF_SECURITY_ADMIN_USER","value":"-"}],"image":"grafana/grafana:7.2.1","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":10,"httpGet":{"path":"/api/health","port":3000},"initialDelaySeconds":60,"timeoutSeconds":30},"name":"grafana","ports":[{"containerPort":3000,"name":"service","protocol":"TCP"},{"containerPort":3000,"name":"grafana","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/api/health","port":3000}},"resources":{},"volumeMounts":[{"mountPath":"/etc/grafana/grafana.ini","name":"config","subPath":"grafana.ini"},{"mountPath":"/var/lib/grafana","name":"storage"},{"mountPath":"/var/lib/grafana/dashboards/istio","name":"dashboards-istio"},{"mountPath":"/var/lib/grafana/dashboards/istio-services","name":"dashboards-istio-services"},{"mountPath":"/etc/grafana/provisioning/datasources/datasources.yaml","name":"config","subPath":"datasources.yaml"},{"mountPath":"/etc/grafana/provisioning/dashboards/dashboardproviders.yaml","name":"config","subPath":"dashboardproviders.yaml"}]}],"securityContext":{"fsGroup":472,"runAsGroup":472,"runAsUser":472},"serviceAccountName":"grafana","volumes":[{"configMap":{"name":"grafana"},"name":"config"},{"configMap":{"name":"istio-grafana-dashboards"},"name":"dashboards-istio"},{"configMap":{"name":"istio-services-grafana-dashboards"},"name":"dashboards-istio-services"},{"emptyDir":{},"name":"storage"}]}}}}
    creationTimestamp: "2021-01-13T06:11:54Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 7.2.1
      helm.sh/chart: grafana-5.8.10
    name: grafana
    namespace: istio-system
    resourceVersion: "27181464"
    uid: 96da3551-ed20-430c-81a1-f329469b4335
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: d2485b1ee9f9be63381c231826a43742bb10ebac2964bdc3f22a100eab9d032c
          checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
          checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: grafana
          app.kubernetes.io/instance: grafana
          app.kubernetes.io/name: grafana
      spec:
        containers:
        - env:
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: Admin
          - name: GF_AUTH_BASIC_ENABLED
            value: "false"
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: '-'
          - name: GF_SECURITY_ADMIN_USER
            value: '-'
          image: grafana/grafana:7.2.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 3000
            name: service
            protocol: TCP
          - containerPort: 3000
            name: grafana
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
          - mountPath: /var/lib/grafana/dashboards/istio
            name: dashboards-istio
          - mountPath: /var/lib/grafana/dashboards/istio-services
            name: dashboards-istio-services
          - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
            name: config
            subPath: datasources.yaml
          - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
            name: config
            subPath: dashboardproviders.yaml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsUser: 472
        serviceAccount: grafana
        serviceAccountName: grafana
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: grafana
          name: config
        - configMap:
            defaultMode: 420
            name: istio-grafana-dashboards
          name: dashboards-istio
        - configMap:
            defaultMode: 420
            name: istio-services-grafana-dashboards
          name: dashboards-istio-services
        - emptyDir: {}
          name: storage
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T06:11:54Z"
      lastUpdateTime: "2021-01-13T06:12:37Z"
      message: ReplicaSet "grafana-784c89f4cf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T07:20:08Z"
      lastUpdateTime: "2021-01-14T07:20:08Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"istio-egressgateway","install.operator.istio.io/owning-resource":"unknown","install.operator.istio.io/owning-resource-namespace":"istio-system","istio":"egressgateway","istio.io/rev":"default","operator.istio.io/component":"EgressGateways","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"1.8.1","release":"istio"},"name":"istio-egressgateway","namespace":"istio-system"},"spec":{"selector":{"matchLabels":{"app":"istio-egressgateway","istio":"egressgateway"}},"strategy":{"rollingUpdate":{"maxSurge":"100%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/stats/prometheus","prometheus.io/port":"15020","prometheus.io/scrape":"true","sidecar.istio.io/inject":"false"},"labels":{"app":"istio-egressgateway","chart":"gateways","heritage":"Tiller","install.operator.istio.io/owning-resource":"unknown","istio":"egressgateway","istio.io/rev":"default","operator.istio.io/component":"EgressGateways","release":"istio","service.istio.io/canonical-name":"istio-egressgateway","service.istio.io/canonical-revision":"latest"}},"spec":{"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["amd64"]}]},"weight":2},{"preference":{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["ppc64le"]}]},"weight":2},{"preference":{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["s390x"]}]},"weight":2}],"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["amd64","ppc64le","s390x"]}]}]}}},"containers":[{"args":["proxy","router","--domain","$(POD_NAMESPACE).svc.cluster.local","--proxyLogLevel=warning","--proxyComponentLogLevel=misc:error","--log_output_level=default:info","--serviceCluster","istio-egressgateway"],"env":[{"name":"JWT_POLICY","value":"first-party-jwt"},{"name":"PILOT_CERT_PROVIDER","value":"istiod"},{"name":"CA_ADDR","value":"istiod.istio-system.svc:15012"},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"INSTANCE_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"HOST_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.hostIP"}}},{"name":"SERVICE_ACCOUNT","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"CANONICAL_SERVICE","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels['service.istio.io/canonical-name']"}}},{"name":"CANONICAL_REVISION","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels['service.istio.io/canonical-revision']"}}},{"name":"ISTIO_META_WORKLOAD_NAME","value":"istio-egressgateway"},{"name":"ISTIO_META_OWNER","value":"kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-egressgateway"},{"name":"ISTIO_META_ROUTER_MODE","value":"standard"},{"name":"ISTIO_META_CLUSTER_ID","value":"Kubernetes"}],"image":"docker.io/istio/proxyv2:1.8.1","name":"istio-proxy","ports":[{"containerPort":8080,"protocol":"TCP"},{"containerPort":8443,"protocol":"TCP"},{"containerPort":15443,"protocol":"TCP"},{"containerPort":15090,"name":"http-envoy-prom","protocol":"TCP"}],"readinessProbe":{"failureThreshold":30,"httpGet":{"path":"/healthz/ready","port":15021,"scheme":"HTTP"},"initialDelaySeconds":1,"periodSeconds":2,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{"cpu":"2000m","memory":"1024Mi"},"requests":{"cpu":"10m","memory":"40Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"privileged":false,"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/etc/istio/proxy","name":"istio-envoy"},{"mountPath":"/etc/istio/config","name":"config-volume"},{"mountPath":"/var/run/secrets/istio","name":"istiod-ca-cert"},{"mountPath":"/var/run/ingress_gateway","name":"gatewaysdsudspath"},{"mountPath":"/var/lib/istio/data","name":"istio-data"},{"mountPath":"/etc/istio/pod","name":"podinfo"},{"mountPath":"/etc/istio/egressgateway-certs","name":"egressgateway-certs","readOnly":true},{"mountPath":"/etc/istio/egressgateway-ca-certs","name":"egressgateway-ca-certs","readOnly":true}]}],"securityContext":{"fsGroup":1337,"runAsGroup":1337,"runAsNonRoot":true,"runAsUser":1337},"serviceAccountName":"istio-egressgateway-service-account","volumes":[{"configMap":{"name":"istio-ca-root-cert"},"name":"istiod-ca-cert"},{"downwardAPI":{"items":[{"fieldRef":{"fieldPath":"metadata.labels"},"path":"labels"},{"fieldRef":{"fieldPath":"metadata.annotations"},"path":"annotations"}]},"name":"podinfo"},{"emptyDir":{},"name":"istio-envoy"},{"emptyDir":{},"name":"gatewaysdsudspath"},{"emptyDir":{},"name":"istio-data"},{"configMap":{"name":"istio","optional":true},"name":"config-volume"},{"name":"egressgateway-certs","secret":{"optional":true,"secretName":"istio-egressgateway-certs"}},{"name":"egressgateway-ca-certs","secret":{"optional":true,"secretName":"istio-egressgateway-ca-certs"}}]}}}}
    creationTimestamp: "2021-01-13T02:25:28Z"
    generation: 1
    labels:
      app: istio-egressgateway
      install.operator.istio.io/owning-resource: unknown
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio: egressgateway
      istio.io/rev: default
      operator.istio.io/component: EgressGateways
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 1.8.1
      release: istio
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:install.operator.istio.io/owning-resource-namespace: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:operator.istio.io/managed: {}
            f:operator.istio.io/version: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:istio: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/path: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:heritage: {}
                f:install.operator.istio.io/owning-resource: {}
                f:istio: {}
                f:istio.io/rev: {}
                f:operator.istio.io/component: {}
                f:release: {}
                f:service.istio.io/canonical-name: {}
                f:service.istio.io/canonical-revision: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution:
                    .: {}
                    f:nodeSelectorTerms: {}
              f:containers:
                k:{"name":"istio-proxy"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"CA_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CANONICAL_REVISION"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"CANONICAL_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"HOST_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"INSTANCE_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"ISTIO_META_CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_OWNER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_ROUTER_MODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_WORKLOAD_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JWT_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PILOT_CERT_PROVIDER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":15443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:privileged: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/istio/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/egressgateway-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/egressgateway-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/pod"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/istio/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/ingress_gateway"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/secrets/istio"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
                k:{"name":"egressgateway-ca-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"egressgateway-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"gatewaysdsudspath"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istio-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istio-envoy"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istiod-ca-cert"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"podinfo"}:
                  .: {}
                  f:downwardAPI:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                  f:name: {}
      manager: istioctl
      operation: Update
      time: "2021-01-13T02:25:28Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:48Z"
    name: istio-egressgateway
    namespace: istio-system
    resourceVersion: "26875083"
    uid: cfffdf17-ee19-4de8-a79e-31c1ee8b6fc4
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: istio-egressgateway
        istio: egressgateway
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: istio-egressgateway
          chart: gateways
          heritage: Tiller
          install.operator.istio.io/owning-resource: unknown
          istio: egressgateway
          istio.io/rev: default
          operator.istio.io/component: EgressGateways
          release: istio
          service.istio.io/canonical-name: istio-egressgateway
          service.istio.io/canonical-revision: latest
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - ppc64le
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - s390x
              weight: 2
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - ppc64le
                  - s390x
        containers:
        - args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --serviceCluster
          - istio-egressgateway
          env:
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: CANONICAL_SERVICE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-name']
          - name: CANONICAL_REVISION
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-revision']
          - name: ISTIO_META_WORKLOAD_NAME
            value: istio-egressgateway
          - name: ISTIO_META_OWNER
            value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-egressgateway
          - name: ISTIO_META_ROUTER_MODE
            value: standard
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          image: docker.io/istio/proxyv2:1.8.1
          imagePullPolicy: IfNotPresent
          name: istio-proxy
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 15443
            protocol: TCP
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 40Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /etc/istio/config
            name: config-volume
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/run/ingress_gateway
            name: gatewaysdsudspath
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/pod
            name: podinfo
          - mountPath: /etc/istio/egressgateway-certs
            name: egressgateway-certs
            readOnly: true
          - mountPath: /etc/istio/egressgateway-ca-certs
            name: egressgateway-ca-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
          runAsGroup: 1337
          runAsNonRoot: true
          runAsUser: 1337
        serviceAccount: istio-egressgateway-service-account
        serviceAccountName: istio-egressgateway-service-account
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - downwardAPI:
            defaultMode: 420
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
          name: podinfo
        - emptyDir: {}
          name: istio-envoy
        - emptyDir: {}
          name: gatewaysdsudspath
        - emptyDir: {}
          name: istio-data
        - configMap:
            defaultMode: 420
            name: istio
            optional: true
          name: config-volume
        - name: egressgateway-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-egressgateway-certs
        - name: egressgateway-ca-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-egressgateway-ca-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T02:25:48Z"
      lastUpdateTime: "2021-01-13T02:25:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T02:25:28Z"
      lastUpdateTime: "2021-01-13T02:25:48Z"
      message: ReplicaSet "istio-egressgateway-d84f95b69" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"istio-ingressgateway","install.operator.istio.io/owning-resource":"unknown","install.operator.istio.io/owning-resource-namespace":"istio-system","istio":"ingressgateway","istio.io/rev":"default","operator.istio.io/component":"IngressGateways","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"1.8.1","release":"istio"},"name":"istio-ingressgateway","namespace":"istio-system"},"spec":{"selector":{"matchLabels":{"app":"istio-ingressgateway","istio":"ingressgateway"}},"strategy":{"rollingUpdate":{"maxSurge":"100%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/stats/prometheus","prometheus.io/port":"15020","prometheus.io/scrape":"true","sidecar.istio.io/inject":"false"},"labels":{"app":"istio-ingressgateway","chart":"gateways","heritage":"Tiller","install.operator.istio.io/owning-resource":"unknown","istio":"ingressgateway","istio.io/rev":"default","operator.istio.io/component":"IngressGateways","release":"istio","service.istio.io/canonical-name":"istio-ingressgateway","service.istio.io/canonical-revision":"latest"}},"spec":{"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["amd64"]}]},"weight":2},{"preference":{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["ppc64le"]}]},"weight":2},{"preference":{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["s390x"]}]},"weight":2}],"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"kubernetes.io/arch","operator":"In","values":["amd64","ppc64le","s390x"]}]}]}}},"containers":[{"args":["proxy","router","--domain","$(POD_NAMESPACE).svc.cluster.local","--proxyLogLevel=warning","--proxyComponentLogLevel=misc:error","--log_output_level=default:info","--serviceCluster","istio-ingressgateway"],"env":[{"name":"JWT_POLICY","value":"first-party-jwt"},{"name":"PILOT_CERT_PROVIDER","value":"istiod"},{"name":"CA_ADDR","value":"istiod.istio-system.svc:15012"},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"INSTANCE_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.podIP"}}},{"name":"HOST_IP","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"status.hostIP"}}},{"name":"SERVICE_ACCOUNT","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"CANONICAL_SERVICE","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels['service.istio.io/canonical-name']"}}},{"name":"CANONICAL_REVISION","valueFrom":{"fieldRef":{"fieldPath":"metadata.labels['service.istio.io/canonical-revision']"}}},{"name":"ISTIO_META_WORKLOAD_NAME","value":"istio-ingressgateway"},{"name":"ISTIO_META_OWNER","value":"kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-ingressgateway"},{"name":"ISTIO_META_ROUTER_MODE","value":"standard"},{"name":"ISTIO_META_CLUSTER_ID","value":"Kubernetes"}],"image":"docker.io/istio/proxyv2:1.8.1","name":"istio-proxy","ports":[{"containerPort":15021,"protocol":"TCP"},{"containerPort":8080,"protocol":"TCP"},{"containerPort":8443,"protocol":"TCP"},{"containerPort":31400,"protocol":"TCP"},{"containerPort":15443,"protocol":"TCP"},{"containerPort":15090,"name":"http-envoy-prom","protocol":"TCP"}],"readinessProbe":{"failureThreshold":30,"httpGet":{"path":"/healthz/ready","port":15021,"scheme":"HTTP"},"initialDelaySeconds":1,"periodSeconds":2,"successThreshold":1,"timeoutSeconds":1},"resources":{"limits":{"cpu":"2000m","memory":"1024Mi"},"requests":{"cpu":"10m","memory":"40Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"privileged":false,"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/etc/istio/proxy","name":"istio-envoy"},{"mountPath":"/etc/istio/config","name":"config-volume"},{"mountPath":"/var/run/secrets/istio","name":"istiod-ca-cert"},{"mountPath":"/var/run/ingress_gateway","name":"gatewaysdsudspath"},{"mountPath":"/var/lib/istio/data","name":"istio-data"},{"mountPath":"/etc/istio/pod","name":"podinfo"},{"mountPath":"/etc/istio/ingressgateway-certs","name":"ingressgateway-certs","readOnly":true},{"mountPath":"/etc/istio/ingressgateway-ca-certs","name":"ingressgateway-ca-certs","readOnly":true}]}],"securityContext":{"fsGroup":1337,"runAsGroup":1337,"runAsNonRoot":true,"runAsUser":1337},"serviceAccountName":"istio-ingressgateway-service-account","volumes":[{"configMap":{"name":"istio-ca-root-cert"},"name":"istiod-ca-cert"},{"downwardAPI":{"items":[{"fieldRef":{"fieldPath":"metadata.labels"},"path":"labels"},{"fieldRef":{"fieldPath":"metadata.annotations"},"path":"annotations"}]},"name":"podinfo"},{"emptyDir":{},"name":"istio-envoy"},{"emptyDir":{},"name":"gatewaysdsudspath"},{"emptyDir":{},"name":"istio-data"},{"configMap":{"name":"istio","optional":true},"name":"config-volume"},{"name":"ingressgateway-certs","secret":{"optional":true,"secretName":"istio-ingressgateway-certs"}},{"name":"ingressgateway-ca-certs","secret":{"optional":true,"secretName":"istio-ingressgateway-ca-certs"}}]}}}}
    creationTimestamp: "2021-01-13T02:25:28Z"
    generation: 1
    labels:
      app: istio-ingressgateway
      install.operator.istio.io/owning-resource: unknown
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio: ingressgateway
      istio.io/rev: default
      operator.istio.io/component: IngressGateways
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 1.8.1
      release: istio
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:install.operator.istio.io/owning-resource-namespace: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:operator.istio.io/managed: {}
            f:operator.istio.io/version: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:istio: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/path: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:heritage: {}
                f:install.operator.istio.io/owning-resource: {}
                f:istio: {}
                f:istio.io/rev: {}
                f:operator.istio.io/component: {}
                f:release: {}
                f:service.istio.io/canonical-name: {}
                f:service.istio.io/canonical-revision: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution:
                    .: {}
                    f:nodeSelectorTerms: {}
              f:containers:
                k:{"name":"istio-proxy"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"CA_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CANONICAL_REVISION"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"CANONICAL_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"HOST_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"INSTANCE_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"ISTIO_META_CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_OWNER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_ROUTER_MODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_WORKLOAD_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JWT_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PILOT_CERT_PROVIDER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15021,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":15443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":31400,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:privileged: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/istio/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/ingressgateway-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/ingressgateway-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/pod"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/istio/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/ingress_gateway"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/secrets/istio"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
                k:{"name":"gatewaysdsudspath"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"ingressgateway-ca-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"ingressgateway-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"istio-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istio-envoy"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istiod-ca-cert"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"podinfo"}:
                  .: {}
                  f:downwardAPI:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                  f:name: {}
      manager: istioctl
      operation: Update
      time: "2021-01-13T02:25:28Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:47Z"
    name: istio-ingressgateway
    namespace: istio-system
    resourceVersion: "26875073"
    uid: 11aa639e-00ed-46be-a950-bfeee647f549
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: istio-ingressgateway
        istio: ingressgateway
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: istio-ingressgateway
          chart: gateways
          heritage: Tiller
          install.operator.istio.io/owning-resource: unknown
          istio: ingressgateway
          istio.io/rev: default
          operator.istio.io/component: IngressGateways
          release: istio
          service.istio.io/canonical-name: istio-ingressgateway
          service.istio.io/canonical-revision: latest
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - ppc64le
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - s390x
              weight: 2
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - ppc64le
                  - s390x
        containers:
        - args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --serviceCluster
          - istio-ingressgateway
          env:
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: CANONICAL_SERVICE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-name']
          - name: CANONICAL_REVISION
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-revision']
          - name: ISTIO_META_WORKLOAD_NAME
            value: istio-ingressgateway
          - name: ISTIO_META_OWNER
            value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-ingressgateway
          - name: ISTIO_META_ROUTER_MODE
            value: standard
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          image: docker.io/istio/proxyv2:1.8.1
          imagePullPolicy: IfNotPresent
          name: istio-proxy
          ports:
          - containerPort: 15021
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 31400
            protocol: TCP
          - containerPort: 15443
            protocol: TCP
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 40Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /etc/istio/config
            name: config-volume
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/run/ingress_gateway
            name: gatewaysdsudspath
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/pod
            name: podinfo
          - mountPath: /etc/istio/ingressgateway-certs
            name: ingressgateway-certs
            readOnly: true
          - mountPath: /etc/istio/ingressgateway-ca-certs
            name: ingressgateway-ca-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
          runAsGroup: 1337
          runAsNonRoot: true
          runAsUser: 1337
        serviceAccount: istio-ingressgateway-service-account
        serviceAccountName: istio-ingressgateway-service-account
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - downwardAPI:
            defaultMode: 420
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
          name: podinfo
        - emptyDir: {}
          name: istio-envoy
        - emptyDir: {}
          name: gatewaysdsudspath
        - emptyDir: {}
          name: istio-data
        - configMap:
            defaultMode: 420
            name: istio
            optional: true
          name: config-volume
        - name: ingressgateway-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-ingressgateway-certs
        - name: ingressgateway-ca-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-ingressgateway-ca-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T02:25:47Z"
      lastUpdateTime: "2021-01-13T02:25:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T02:25:28Z"
      lastUpdateTime: "2021-01-13T02:25:47Z"
      message: ReplicaSet "istio-ingressgateway-75f6d79f48" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"istiod","install.operator.istio.io/owning-resource":"unknown","install.operator.istio.io/owning-resource-namespace":"istio-system","istio":"pilot","istio.io/rev":"default","operator.istio.io/component":"Pilot","operator.istio.io/managed":"Reconcile","operator.istio.io/version":"1.8.1","release":"istio"},"name":"istiod","namespace":"istio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"istio":"pilot"}},"strategy":{"rollingUpdate":{"maxSurge":"100%","maxUnavailable":"25%"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"15014","prometheus.io/scrape":"true","sidecar.istio.io/inject":"false"},"labels":{"app":"istiod","install.operator.istio.io/owning-resource":"unknown","istio":"pilot","istio.io/rev":"default","operator.istio.io/component":"Pilot"}},"spec":{"containers":[{"args":["discovery","--monitoringAddr=:15014","--log_output_level=default:info","--domain","cluster.local","--keepaliveMaxServerConnectionAge","30m"],"env":[{"name":"REVISION","value":"default"},{"name":"JWT_POLICY","value":"first-party-jwt"},{"name":"PILOT_CERT_PROVIDER","value":"istiod"},{"name":"POD_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}},{"name":"SERVICE_ACCOUNT","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.serviceAccountName"}}},{"name":"KUBECONFIG","value":"/var/run/secrets/remote/config"},{"name":"ENABLE_LEGACY_FSGROUP_INJECTION","value":"false"},{"name":"PILOT_TRACE_SAMPLING","value":"100"},{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND","value":"true"},{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND","value":"true"},{"name":"INJECTION_WEBHOOK_CONFIG_NAME","value":"istio-sidecar-injector"},{"name":"ISTIOD_ADDR","value":"istiod.istio-system.svc:15012"},{"name":"PILOT_ENABLE_ANALYSIS","value":"false"},{"name":"CLUSTER_ID","value":"Kubernetes"},{"name":"EXTERNAL_ISTIOD","value":"false"},{"name":"CENTRAL_ISTIOD","value":"false"},{"name":"PILOT_ENDPOINT_TELEMETRY_LABEL","value":"true"}],"image":"docker.io/istio/pilot:1.8.1","name":"discovery","ports":[{"containerPort":8080,"protocol":"TCP"},{"containerPort":15010,"protocol":"TCP"},{"containerPort":15017,"protocol":"TCP"},{"containerPort":15053,"protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/ready","port":8080},"initialDelaySeconds":1,"periodSeconds":3,"timeoutSeconds":5},"resources":{"requests":{"cpu":"10m","memory":"100Mi"}},"securityContext":{"capabilities":{"drop":["ALL"]},"runAsGroup":1337,"runAsNonRoot":true,"runAsUser":1337},"volumeMounts":[{"mountPath":"/etc/istio/config","name":"config-volume"},{"mountPath":"/var/run/secrets/istio-dns","name":"local-certs"},{"mountPath":"/etc/cacerts","name":"cacerts","readOnly":true},{"mountPath":"/var/run/secrets/remote","name":"istio-kubeconfig","readOnly":true},{"mountPath":"/var/lib/istio/inject","name":"inject","readOnly":true}]}],"securityContext":{"fsGroup":1337},"serviceAccountName":"istiod-service-account","volumes":[{"emptyDir":{"medium":"Memory"},"name":"local-certs"},{"name":"cacerts","secret":{"optional":true,"secretName":"cacerts"}},{"name":"istio-kubeconfig","secret":{"optional":true,"secretName":"istio-kubeconfig"}},{"configMap":{"name":"istio-sidecar-injector"},"name":"inject"},{"configMap":{"name":"istio"},"name":"config-volume"}]}}}}
    creationTimestamp: "2021-01-13T02:25:01Z"
    generation: 1
    labels:
      app: istiod
      install.operator.istio.io/owning-resource: unknown
      install.operator.istio.io/owning-resource-namespace: istio-system
      istio: pilot
      istio.io/rev: default
      operator.istio.io/component: Pilot
      operator.istio.io/managed: Reconcile
      operator.istio.io/version: 1.8.1
      release: istio
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:install.operator.istio.io/owning-resource-namespace: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:operator.istio.io/managed: {}
            f:operator.istio.io/version: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:istio: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:install.operator.istio.io/owning-resource: {}
                f:istio: {}
                f:istio.io/rev: {}
                f:operator.istio.io/component: {}
            f:spec:
              f:containers:
                k:{"name":"discovery"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"CENTRAL_ISTIOD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ENABLE_LEGACY_FSGROUP_INJECTION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"EXTERNAL_ISTIOD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INJECTION_WEBHOOK_CONFIG_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIOD_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JWT_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBECONFIG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_CERT_PROVIDER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENABLE_ANALYSIS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENDPOINT_TELEMETRY_LABEL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_TRACE_SAMPLING"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"REVISION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15010,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15017,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15053,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:runAsGroup: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/cacerts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/istio/inject"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/run/secrets/istio-dns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/secrets/remote"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"cacerts"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"inject"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"istio-kubeconfig"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"local-certs"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                  f:name: {}
      manager: istioctl
      operation: Update
      time: "2021-01-13T02:25:01Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:26Z"
    name: istiod
    namespace: istio-system
    resourceVersion: "26874927"
    uid: f47210c4-f77c-41ef-8b36-cc0ea2fd00a5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        istio: pilot
    strategy:
      rollingUpdate:
        maxSurge: 100%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "15014"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: istiod
          install.operator.istio.io/owning-resource: unknown
          istio: pilot
          istio.io/rev: default
          operator.istio.io/component: Pilot
      spec:
        containers:
        - args:
          - discovery
          - --monitoringAddr=:15014
          - --log_output_level=default:info
          - --domain
          - cluster.local
          - --keepaliveMaxServerConnectionAge
          - 30m
          env:
          - name: REVISION
            value: default
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: KUBECONFIG
            value: /var/run/secrets/remote/config
          - name: ENABLE_LEGACY_FSGROUP_INJECTION
            value: "false"
          - name: PILOT_TRACE_SAMPLING
            value: "100"
          - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND
            value: "true"
          - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND
            value: "true"
          - name: INJECTION_WEBHOOK_CONFIG_NAME
            value: istio-sidecar-injector
          - name: ISTIOD_ADDR
            value: istiod.istio-system.svc:15012
          - name: PILOT_ENABLE_ANALYSIS
            value: "false"
          - name: CLUSTER_ID
            value: Kubernetes
          - name: EXTERNAL_ISTIOD
            value: "false"
          - name: CENTRAL_ISTIOD
            value: "false"
          - name: PILOT_ENDPOINT_TELEMETRY_LABEL
            value: "true"
          image: docker.io/istio/pilot:1.8.1
          imagePullPolicy: IfNotPresent
          name: discovery
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 15010
            protocol: TCP
          - containerPort: 15017
            protocol: TCP
          - containerPort: 15053
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 100Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/istio/config
            name: config-volume
          - mountPath: /var/run/secrets/istio-dns
            name: local-certs
          - mountPath: /etc/cacerts
            name: cacerts
            readOnly: true
          - mountPath: /var/run/secrets/remote
            name: istio-kubeconfig
            readOnly: true
          - mountPath: /var/lib/istio/inject
            name: inject
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: istiod-service-account
        serviceAccountName: istiod-service-account
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: Memory
          name: local-certs
        - name: cacerts
          secret:
            defaultMode: 420
            optional: true
            secretName: cacerts
        - name: istio-kubeconfig
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-kubeconfig
        - configMap:
            defaultMode: 420
            name: istio-sidecar-injector
          name: inject
        - configMap:
            defaultMode: 420
            name: istio
          name: config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T02:25:26Z"
      lastUpdateTime: "2021-01-13T02:25:26Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T02:25:01Z"
      lastUpdateTime: "2021-01-13T02:25:26Z"
      message: ReplicaSet "istiod-c9f6864c4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"jaeger"},"name":"jaeger","namespace":"istio-system"},"spec":{"selector":{"matchLabels":{"app":"jaeger"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"14269","prometheus.io/scrape":"true","sidecar.istio.io/inject":"false"},"labels":{"app":"jaeger"}},"spec":{"containers":[{"env":[{"name":"BADGER_EPHEMERAL","value":"false"},{"name":"SPAN_STORAGE_TYPE","value":"badger"},{"name":"BADGER_DIRECTORY_VALUE","value":"/badger/data"},{"name":"BADGER_DIRECTORY_KEY","value":"/badger/key"},{"name":"COLLECTOR_ZIPKIN_HTTP_PORT","value":"9411"},{"name":"MEMORY_MAX_TRACES","value":"50000"},{"name":"QUERY_BASE_PATH","value":"/jaeger"}],"image":"docker.io/jaegertracing/all-in-one:1.20","livenessProbe":{"httpGet":{"path":"/","port":14269}},"name":"jaeger","readinessProbe":{"httpGet":{"path":"/","port":14269}},"resources":{"requests":{"cpu":"10m"}},"volumeMounts":[{"mountPath":"/badger","name":"data"}]}],"volumes":[{"emptyDir":{},"name":"data"}]}}}}
    creationTimestamp: "2021-01-13T06:11:55Z"
    generation: 1
    labels:
      app: jaeger
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"jaeger"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"BADGER_DIRECTORY_KEY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"BADGER_DIRECTORY_VALUE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"BADGER_EPHEMERAL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"COLLECTOR_ZIPKIN_HTTP_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MEMORY_MAX_TRACES"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"QUERY_BASE_PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SPAN_STORAGE_TYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/badger"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:55Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:19:59Z"
    name: jaeger
    namespace: istio-system
    resourceVersion: "27181404"
    uid: 6c410006-9ccb-4003-955e-57ed80ad9399
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: jaeger
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "14269"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: jaeger
      spec:
        containers:
        - env:
          - name: BADGER_EPHEMERAL
            value: "false"
          - name: SPAN_STORAGE_TYPE
            value: badger
          - name: BADGER_DIRECTORY_VALUE
            value: /badger/data
          - name: BADGER_DIRECTORY_KEY
            value: /badger/key
          - name: COLLECTOR_ZIPKIN_HTTP_PORT
            value: "9411"
          - name: MEMORY_MAX_TRACES
            value: "50000"
          - name: QUERY_BASE_PATH
            value: /jaeger
          image: docker.io/jaegertracing/all-in-one:1.20
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: jaeger
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /badger
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T06:11:55Z"
      lastUpdateTime: "2021-01-13T06:12:06Z"
      message: ReplicaSet "jaeger-7f78b6fb65" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T07:19:59Z"
      lastUpdateTime: "2021-01-14T07:19:59Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"kiali","app.kubernetes.io/instance":"kiali-server","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"kiali","app.kubernetes.io/version":"v1.26.0","helm.sh/chart":"kiali-server-1.26.0","version":"v1.26.0"},"name":"kiali","namespace":"istio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"kiali-server","app.kubernetes.io/name":"kiali"}},"strategy":{"rollingUpdate":{"maxSurge":1,"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"kiali.io/runtimes":"go,kiali","prometheus.io/port":"9090","prometheus.io/scrape":"true","sidecar.istio.io/inject":"false"},"labels":{"app":"kiali","app.kubernetes.io/instance":"kiali-server","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"kiali","app.kubernetes.io/version":"v1.26.0","helm.sh/chart":"kiali-server-1.26.0","version":"v1.26.0"},"name":"kiali"},"spec":{"containers":[{"command":["/opt/kiali/kiali","-config","/kiali-configuration/config.yaml","-v","3"],"env":[{"name":"ACTIVE_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/kiali/kiali:v1.26","imagePullPolicy":"Always","livenessProbe":{"httpGet":{"path":"/kiali/healthz","port":"api-port","scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":30},"name":"kiali","ports":[{"containerPort":20001,"name":"api-port"},{"containerPort":9090,"name":"http-metrics"}],"readinessProbe":{"httpGet":{"path":"/kiali/healthz","port":"api-port","scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":30},"volumeMounts":[{"mountPath":"/kiali-configuration","name":"kiali-configuration"},{"mountPath":"/kiali-cert","name":"kiali-cert"},{"mountPath":"/kiali-secret","name":"kiali-secret"}]}],"serviceAccountName":"kiali","volumes":[{"configMap":{"name":"kiali"},"name":"kiali-configuration"},{"name":"kiali-cert","secret":{"optional":true,"secretName":"istio.kiali-service-account"}},{"name":"kiali-secret","secret":{"optional":true,"secretName":"kiali"}}]}}}}
    creationTimestamp: "2021-01-13T06:11:55Z"
    generation: 1
    labels:
      app: kiali
      app.kubernetes.io/instance: kiali-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kiali
      app.kubernetes.io/version: v1.26.0
      helm.sh/chart: kiali-server-1.26.0
      version: v1.26.0
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:version: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:kiali.io/runtimes: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:version: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"kiali"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ACTIVE_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":20001,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/kiali-cert"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/kiali-configuration"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/kiali-secret"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"kiali-cert"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"kiali-configuration"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"kiali-secret"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:55Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:42Z"
    name: kiali
    namespace: istio-system
    resourceVersion: "27206483"
    uid: 2a8101c1-cd58-431f-ac18-90ccc04cf375
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: kiali-server
        app.kubernetes.io/name: kiali
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kiali.io/runtimes: go,kiali
          prometheus.io/port: "9090"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: kiali
          app.kubernetes.io/instance: kiali-server
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kiali
          app.kubernetes.io/version: v1.26.0
          helm.sh/chart: kiali-server-1.26.0
          version: v1.26.0
        name: kiali
      spec:
        containers:
        - command:
          - /opt/kiali/kiali
          - -config
          - /kiali-configuration/config.yaml
          - -v
          - "3"
          env:
          - name: ACTIVE_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/kiali/kiali:v1.26
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /kiali/healthz
              port: api-port
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: kiali
          ports:
          - containerPort: 20001
            name: api-port
            protocol: TCP
          - containerPort: 9090
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /kiali/healthz
              port: api-port
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kiali-configuration
            name: kiali-configuration
          - mountPath: /kiali-cert
            name: kiali-cert
          - mountPath: /kiali-secret
            name: kiali-secret
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kiali
        serviceAccountName: kiali
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: kiali
          name: kiali-configuration
        - name: kiali-cert
          secret:
            defaultMode: 420
            optional: true
            secretName: istio.kiali-service-account
        - name: kiali-secret
          secret:
            defaultMode: 420
            optional: true
            secretName: kiali
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T06:11:56Z"
      lastUpdateTime: "2021-01-13T06:11:56Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T06:11:56Z"
      lastUpdateTime: "2021-01-13T06:12:44Z"
      message: ReplicaSet "kiali-7476977cf9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"prometheus","chart":"prometheus-11.16.2","component":"server","heritage":"Helm","release":"prometheus"},"name":"prometheus","namespace":"istio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"prometheus","component":"server","release":"prometheus"}},"template":{"metadata":{"annotations":{"sidecar.istio.io/inject":"false"},"labels":{"app":"prometheus","chart":"prometheus-11.16.2","component":"server","heritage":"Helm","release":"prometheus"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.4.0","imagePullPolicy":"IfNotPresent","name":"prometheus-server-configmap-reload","resources":{},"volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--storage.tsdb.retention.time=15d","--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.21.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090},"initialDelaySeconds":30,"periodSeconds":15,"successThreshold":1,"timeoutSeconds":30},"name":"prometheus-server","ports":[{"containerPort":9090}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090},"initialDelaySeconds":0,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":30},"resources":{},"volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume","subPath":""}]}],"securityContext":{"fsGroup":65534,"runAsGroup":65534,"runAsNonRoot":true,"runAsUser":65534},"serviceAccountName":"prometheus","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"name":"prometheus"},"name":"config-volume"},{"emptyDir":{},"name":"storage-volume"}]}}}}
    creationTimestamp: "2021-01-13T06:11:56Z"
    generation: 1
    labels:
      app: prometheus
      chart: prometheus-11.16.2
      component: server
      heritage: Helm
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-server-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-13T06:11:56Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T06:12:22Z"
    name: prometheus
    namespace: istio-system
    resourceVersion: "26915569"
    uid: 741daec9-40c3-4f4a-8511-7c2fc3351239
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: server
        release: prometheus
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.16.2
          component: server
          heritage: Helm
          release: prometheus
      spec:
        containers:
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9090/-/reload
          image: jimmidyson/configmap-reload:v0.4.0
          imagePullPolicy: IfNotPresent
          name: prometheus-server-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          image: prom/prometheus:v2.21.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 30
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus
        serviceAccountName: prometheus
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus
          name: config-volume
        - emptyDir: {}
          name: storage-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-13T06:12:22Z"
      lastUpdateTime: "2021-01-13T06:12:22Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-13T06:11:57Z"
      lastUpdateTime: "2021-01-13T06:12:22Z"
      message: ReplicaSet "prometheus-7bfddb8dbf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2020-09-08T07:35:37Z"
    generation: 2
    labels:
      k8s-app: kube-dns
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
      manager: kubeadm
      operation: Update
      time: "2021-01-14T09:29:33Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            k:{"type":"Available"}:
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
            k:{"type":"Progressing"}:
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:28Z"
    name: coredns
    namespace: kube-system
    resourceVersion: "27206402"
    uid: c11218d9-74a3-4cdd-8f59-87c8d1732c6f
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2020-09-08T07:46:50Z"
      lastUpdateTime: "2021-01-14T09:29:59Z"
      message: ReplicaSet "coredns-74ff55c5b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T09:42:20Z"
      lastUpdateTime: "2021-01-14T09:42:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metrics-server"}},"template":{"metadata":{"labels":{"k8s-app":"metrics-server"},"name":"metrics-server"},"spec":{"containers":[{"args":["--cert-dir=/tmp","--secure-port=4443"],"image":"k8s.gcr.io/metrics-server/metrics-server:v0.3.7","imagePullPolicy":"IfNotPresent","name":"metrics-server","ports":[{"containerPort":4443,"name":"main-port","protocol":"TCP"}],"securityContext":{"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1000},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-dir"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"metrics-server","volumes":[{"emptyDir":{},"name":"tmp-dir"}]}}}}
    creationTimestamp: "2020-09-17T06:12:17Z"
    generation: 2
    labels:
      k8s-app: metrics-server
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-dir"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-09-17T06:12:17Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  f:args: {}
      manager: kubectl-edit
      operation: Update
      time: "2020-09-18T02:13:53Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:20Z"
    name: metrics-server
    namespace: kube-system
    resourceVersion: "27206334"
    uid: 7c9321bb-81d7-4dbb-9253-0df18ecf5b97
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
        name: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-insecure-tls
          - --kubelet-preferred-address-types=InternalIP
          image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 4443
            name: main-port
            protocol: TCP
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-09-17T06:12:17Z"
      lastUpdateTime: "2020-09-18T02:14:01Z"
      message: ReplicaSet "metrics-server-75f98fdbd5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T09:42:20Z"
      lastUpdateTime: "2021-01-14T09:42:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"dashboard-metrics-scraper"},"name":"dashboard-metrics-scraper","namespace":"kubernetes-dashboard"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"dashboard-metrics-scraper"}},"template":{"metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/pod":"runtime/default"},"labels":{"k8s-app":"dashboard-metrics-scraper"}},"spec":{"containers":[{"image":"kubernetesui/metrics-scraper:v1.0.6","livenessProbe":{"httpGet":{"path":"/","port":8000,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"dashboard-metrics-scraper","ports":[{"containerPort":8000,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2021-01-12T04:21:09Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:seccomp.security.alpha.kubernetes.io/pod: {}
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"dashboard-metrics-scraper"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-12T04:21:09Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-12T04:21:12Z"
    name: dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "26673306"
    uid: 77a7da6d-efbd-414e-a90b-35b402fea1bf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-12T04:21:12Z"
      lastUpdateTime: "2021-01-12T04:21:12Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-01-12T04:21:10Z"
      lastUpdateTime: "2021-01-12T04:21:12Z"
      message: ReplicaSet "dashboard-metrics-scraper-79c5968bdc" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard","namespace":"kubernetes-dashboard"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"kubernetes-dashboard"}},"template":{"metadata":{"labels":{"k8s-app":"kubernetes-dashboard"}},"spec":{"containers":[{"args":["--auto-generate-certificates","--namespace=kubernetes-dashboard"],"image":"kubernetesui/dashboard:v2.1.0","imagePullPolicy":"Always","livenessProbe":{"httpGet":{"path":"/","port":8443,"scheme":"HTTPS"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"kubernetes-dashboard","ports":[{"containerPort":8443,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/certs","name":"kubernetes-dashboard-certs"},{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"name":"kubernetes-dashboard-certs","secret":{"secretName":"kubernetes-dashboard-certs"}},{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2021-01-12T04:21:09Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kubernetes-dashboard"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubernetes-dashboard-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-01-12T04:21:09Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:18:06Z"
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
    resourceVersion: "27202050"
    uid: b87ecdab-4a59-48bc-b343-330fed64b012
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
      spec:
        containers:
        - args:
          - --auto-generate-certificates
          - --namespace=kubernetes-dashboard
          image: kubernetesui/dashboard:v2.1.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-01-12T04:21:09Z"
      lastUpdateTime: "2021-01-12T04:21:15Z"
      message: ReplicaSet "kubernetes-dashboard-7448ffc97b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-01-14T09:18:06Z"
      lastUpdateTime: "2021-01-14T09:18:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-09-14T04:44:40Z"
    generation: 1
    labels:
      app: pod-jenkins-deploy
      pod-template-hash: 6c8f5b65cb
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c3582cac-1fe5-44d7-b49b-8419d8a98e9d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"jenkins"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:19:14Z"
    name: pod-jenkins-deploy-6c8f5b65cb
    namespace: blue
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: pod-jenkins-deploy
      uid: c3582cac-1fe5-44d7-b49b-8419d8a98e9d
    resourceVersion: "27181054"
    uid: a74bd5aa-4cf5-417c-9135-10c3c758326a
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: pod-jenkins-deploy
        pod-template-hash: 6c8f5b65cb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: pod-jenkins-deploy
          pod-template-hash: 6c8f5b65cb
      spec:
        containers:
        - image: jenkins
          imagePullPolicy: Always
          name: jenkins
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T04:29:07Z"
    generation: 1
    labels:
      app: details
      pod-template-hash: 79c697d759
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d66c0690-ba90-4955-bfd4-79819eb1a170"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
              f:version: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"details"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:30:27Z"
    name: details-v1-79c697d759
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: details-v1
      uid: d66c0690-ba90-4955-bfd4-79819eb1a170
    resourceVersion: "26897228"
    uid: c72485d4-8b52-4746-a50b-dbed06012549
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: details
        pod-template-hash: 79c697d759
        version: v1
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: details
          pod-template-hash: 79c697d759
          version: v1
      spec:
        containers:
        - image: docker.io/istio/examples-bookinfo-details-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: details
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-details
        serviceAccountName: bookinfo-details
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "10"
      deployment.kubernetes.io/max-replicas: "13"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-14T07:51:19Z"
    generation: 2
    labels:
      app: http-go
      pod-template-hash: 568f649bb
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dcbe015d-5a37-4786-a8b6-8aabe20c674d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"http-go"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:39:56Z"
    name: http-go-568f649bb
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: http-go
      uid: dcbe015d-5a37-4786-a8b6-8aabe20c674d
    resourceVersion: "27206648"
    uid: a8c886a9-47c2-4e95-a4e7-9971bcba2c44
  spec:
    replicas: 10
    selector:
      matchLabels:
        app: http-go
        pod-template-hash: 568f649bb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: http-go
          pod-template-hash: 568f649bb
      spec:
        containers:
        - image: gasbugs/http-go
          imagePullPolicy: Always
          name: http-go
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 10
    fullyLabeledReplicas: 10
    observedGeneration: 2
    readyReplicas: 10
    replicas: 10
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: productpage
      pod-template-hash: 65576bb7bf
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"e02c4b72-fc31-4d4b-8623-31295cb2deec"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"productpage"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:58Z"
    name: productpage-v1-65576bb7bf
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: productpage-v1
      uid: e02c4b72-fc31-4d4b-8623-31295cb2deec
    resourceVersion: "27206541"
    uid: 6bedfe22-f8f4-4501-aa19-4119ab0642b4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: productpage
        pod-template-hash: 65576bb7bf
        version: v1
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: productpage
          pod-template-hash: 65576bb7bf
          version: v1
      spec:
        containers:
        - image: docker.io/istio/examples-bookinfo-productpage-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: productpage
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-productpage
        serviceAccountName: bookinfo-productpage
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T04:29:07Z"
    generation: 1
    labels:
      app: ratings
      pod-template-hash: 7d99676f7f
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"994f57de-3cdb-410a-90da-e826a9fe5227"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"ratings"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:43:01Z"
    name: ratings-v1-7d99676f7f
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ratings-v1
      uid: 994f57de-3cdb-410a-90da-e826a9fe5227
    resourceVersion: "27206554"
    uid: 4ba875f5-b637-40f6-adca-f3445465bde8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ratings
        pod-template-hash: 7d99676f7f
        version: v1
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ratings
          pod-template-hash: 7d99676f7f
          version: v1
      spec:
        containers:
        - image: docker.io/istio/examples-bookinfo-ratings-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: ratings
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-ratings
        serviceAccountName: bookinfo-ratings
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: reviews
      pod-template-hash: 987d495c
      version: v1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"012dc15e-4dfc-476e-864a-eed75f1da121"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
              f:version: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"reviews"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"LOG_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/ibm/wlp/output"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wlp-output"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:30:32Z"
    name: reviews-v1-987d495c
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reviews-v1
      uid: 012dc15e-4dfc-476e-864a-eed75f1da121
    resourceVersion: "26897263"
    uid: b6b5d140-2f4f-417f-897c-8fcaf4d82b62
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: reviews
        pod-template-hash: 987d495c
        version: v1
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reviews
          pod-template-hash: 987d495c
          version: v1
      spec:
        containers:
        - env:
          - name: LOG_DIR
            value: /tmp/logs
          image: docker.io/istio/examples-bookinfo-reviews-v1:1.16.2
          imagePullPolicy: IfNotPresent
          name: reviews
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /opt/ibm/wlp/output
            name: wlp-output
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-reviews
        serviceAccountName: bookinfo-reviews
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: wlp-output
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: reviews
      pod-template-hash: 6c5bf657cf
      version: v2
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a9ac8d9c-2774-4087-8ba7-e2f1da4bc308"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"reviews"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"LOG_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/ibm/wlp/output"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wlp-output"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:43:09Z"
    name: reviews-v2-6c5bf657cf
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reviews-v2
      uid: a9ac8d9c-2774-4087-8ba7-e2f1da4bc308
    resourceVersion: "27206594"
    uid: a4e92a97-555a-4633-a834-017812cabe29
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: reviews
        pod-template-hash: 6c5bf657cf
        version: v2
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reviews
          pod-template-hash: 6c5bf657cf
          version: v2
      spec:
        containers:
        - env:
          - name: LOG_DIR
            value: /tmp/logs
          image: docker.io/istio/examples-bookinfo-reviews-v2:1.16.2
          imagePullPolicy: IfNotPresent
          name: reviews
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /opt/ibm/wlp/output
            name: wlp-output
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-reviews
        serviceAccountName: bookinfo-reviews
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: wlp-output
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T04:29:08Z"
    generation: 1
    labels:
      app: reviews
      pod-template-hash: 5f7b9f4f77
      version: v3
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7a9b832b-4fe6-4fce-b991-69f4a1b56ff1"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
              f:version: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:version: {}
            f:spec:
              f:containers:
                k:{"name":"reviews"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"LOG_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/ibm/wlp/output"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"wlp-output"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T04:30:30Z"
    name: reviews-v3-5f7b9f4f77
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reviews-v3
      uid: 7a9b832b-4fe6-4fce-b991-69f4a1b56ff1
    resourceVersion: "26897248"
    uid: dca64a3f-b431-44f5-a116-152f0b34c531
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: reviews
        pod-template-hash: 5f7b9f4f77
        version: v3
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reviews
          pod-template-hash: 5f7b9f4f77
          version: v3
      spec:
        containers:
        - env:
          - name: LOG_DIR
            value: /tmp/logs
          image: docker.io/istio/examples-bookinfo-reviews-v3:1.16.2
          imagePullPolicy: IfNotPresent
          name: reviews
          ports:
          - containerPort: 9080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /opt/ibm/wlp/output
            name: wlp-output
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: bookinfo-reviews
        serviceAccountName: bookinfo-reviews
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: wlp-output
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: es-operator
      meta.helm.sh/release-namespace: efk-logging
    creationTimestamp: "2021-01-12T08:26:13Z"
    generation: 1
    labels:
      app: elasticsearch-operator
      pod-template-hash: 575d9966bc
      release: es-operator
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"17d50e83-5042-4d85-9d4c-6d108cfc876a"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
              f:release: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"elasticsearch-operator"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-12T08:26:31Z"
    name: es-operator-elasticsearch-operator-575d9966bc
    namespace: efk-logging
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: es-operator-elasticsearch-operator
      uid: 17d50e83-5042-4d85-9d4c-6d108cfc876a
    resourceVersion: "26710717"
    uid: dbebd352-34bc-4804-8b85-9711f933320d
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: elasticsearch-operator
        pod-template-hash: 575d9966bc
        release: es-operator
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: elasticsearch-operator
          pod-template-hash: 575d9966bc
          release: es-operator
      spec:
        containers:
        - args:
          - -c
          - /usr/local/bin/elasticsearch-operator -initDaemonsetNamespace $(NAMESPACE)
          command:
          - /bin/sh
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: upmcenterprises/elasticsearch-operator:0.3.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /live
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: elasticsearch-operator
          ports:
          - containerPort: 8000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: es-operator-elasticsearch-operator
        serviceAccountName: es-operator-elasticsearch-operator
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-09-11T06:25:23Z"
    generation: 1
    labels:
      app: runner-gitlab-runner
      chart: gitlab-runner-0.19.3
      heritage: Tiller
      pod-template-hash: 69779496d5
      release: runner
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"47388c7c-4dc2-4b18-8486-cd73a80852cf"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:checksum/configmap: {}
                f:checksum/secrets: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:heritage: {}
                f:pod-template-hash: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"runner-gitlab-runner"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CI_SERVER_URL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CLONE_URL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_IMAGE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_POLL_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PRIVILEGED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"REGISTER_LOCKED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_EXECUTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_OUTPUT_LIMIT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_REQUEST_CONCURRENCY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_TAG_LIST"}:
                      .: {}
                      f:name: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9252,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/gitlab-runner/.gitlab-runner"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/scripts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"configure"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CI_SERVER_URL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CLONE_URL"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_IMAGE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_HELPER_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_POLL_TIMEOUT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PRIVILEGED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_PULL_POLICY"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_CPU_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_LIMIT"}:
                      .: {}
                      f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_MEMORY_REQUEST"}:
                      .: {}
                      f:name: {}
                    k:{"name":"REGISTER_LOCKED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_EXECUTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_OUTPUT_LIMIT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_REQUEST_CONCURRENCY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RUNNER_TAG_LIST"}:
                      .: {}
                      f:name: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/init-secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/secrets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"etc-gitlab-runner"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                  f:name: {}
                k:{"name":"init-runner-secrets"}:
                  .: {}
                  f:name: {}
                  f:projected:
                    .: {}
                    f:defaultMode: {}
                    f:sources: {}
                k:{"name":"runner-secrets"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                  f:name: {}
                k:{"name":"scripts"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:20:05Z"
    name: runner-gitlab-runner-69779496d5
    namespace: gitlab-managed-apps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: runner-gitlab-runner
      uid: 47388c7c-4dc2-4b18-8486-cd73a80852cf
    resourceVersion: "27181432"
    uid: 37252fc4-1f0e-4222-b09e-77ef619ff176
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: runner-gitlab-runner
        pod-template-hash: 69779496d5
    template:
      metadata:
        annotations:
          checksum/configmap: 04e5ccf37e4130439017b11d463d699a987c43a7845ddd4fad551b4226055def
          checksum/secrets: 1187decf4242a376b96abd5abd06404313fb5368132d9bc3bc48f6fab25dfada
          prometheus.io/port: "9252"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: runner-gitlab-runner
          chart: gitlab-runner-0.19.3
          heritage: Tiller
          pod-template-hash: 69779496d5
          release: runner
      spec:
        containers:
        - command:
          - /bin/bash
          - /scripts/entrypoint
          env:
          - name: CI_SERVER_URL
            value: http://20.194.41.47:31111/
          - name: CLONE_URL
          - name: RUNNER_REQUEST_CONCURRENCY
            value: "1"
          - name: RUNNER_EXECUTOR
            value: kubernetes
          - name: REGISTER_LOCKED
            value: "true"
          - name: RUNNER_TAG_LIST
          - name: RUNNER_OUTPUT_LIMIT
            value: "4096"
          - name: KUBERNETES_IMAGE
            value: ubuntu:16.04
          - name: KUBERNETES_PRIVILEGED
            value: "true"
          - name: KUBERNETES_NAMESPACE
            value: gitlab-managed-apps
          - name: KUBERNETES_POLL_TIMEOUT
            value: "180"
          - name: KUBERNETES_CPU_LIMIT
          - name: KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_LIMIT
          - name: KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_CPU_REQUEST
          - name: KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_REQUEST
          - name: KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_SERVICE_ACCOUNT
          - name: KUBERNETES_SERVICE_CPU_LIMIT
          - name: KUBERNETES_SERVICE_MEMORY_LIMIT
          - name: KUBERNETES_SERVICE_CPU_REQUEST
          - name: KUBERNETES_SERVICE_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_CPU_LIMIT
          - name: KUBERNETES_HELPER_MEMORY_LIMIT
          - name: KUBERNETES_HELPER_CPU_REQUEST
          - name: KUBERNETES_HELPER_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_IMAGE
          - name: KUBERNETES_PULL_POLICY
          image: gitlab/gitlab-runner:alpine-v13.2.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - /scripts/check-live
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: runner-gitlab-runner
          ports:
          - containerPort: 9252
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/bin/pgrep
              - gitlab.*runner
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secrets
            name: runner-secrets
          - mountPath: /home/gitlab-runner/.gitlab-runner
            name: etc-gitlab-runner
          - mountPath: /scripts
            name: scripts
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - /config/configure
          env:
          - name: CI_SERVER_URL
            value: http://20.194.41.47:31111/
          - name: CLONE_URL
          - name: RUNNER_REQUEST_CONCURRENCY
            value: "1"
          - name: RUNNER_EXECUTOR
            value: kubernetes
          - name: REGISTER_LOCKED
            value: "true"
          - name: RUNNER_TAG_LIST
          - name: RUNNER_OUTPUT_LIMIT
            value: "4096"
          - name: KUBERNETES_IMAGE
            value: ubuntu:16.04
          - name: KUBERNETES_PRIVILEGED
            value: "true"
          - name: KUBERNETES_NAMESPACE
            value: gitlab-managed-apps
          - name: KUBERNETES_POLL_TIMEOUT
            value: "180"
          - name: KUBERNETES_CPU_LIMIT
          - name: KUBERNETES_CPU_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_LIMIT
          - name: KUBERNETES_MEMORY_LIMIT_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_CPU_REQUEST
          - name: KUBERNETES_CPU_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_MEMORY_REQUEST
          - name: KUBERNETES_MEMORY_REQUEST_OVERWRITE_MAX_ALLOWED
          - name: KUBERNETES_SERVICE_ACCOUNT
          - name: KUBERNETES_SERVICE_CPU_LIMIT
          - name: KUBERNETES_SERVICE_MEMORY_LIMIT
          - name: KUBERNETES_SERVICE_CPU_REQUEST
          - name: KUBERNETES_SERVICE_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_CPU_LIMIT
          - name: KUBERNETES_HELPER_MEMORY_LIMIT
          - name: KUBERNETES_HELPER_CPU_REQUEST
          - name: KUBERNETES_HELPER_MEMORY_REQUEST
          - name: KUBERNETES_HELPER_IMAGE
          - name: KUBERNETES_PULL_POLICY
          image: gitlab/gitlab-runner:alpine-v13.2.3
          imagePullPolicy: IfNotPresent
          name: configure
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /secrets
            name: runner-secrets
          - mountPath: /config
            name: scripts
            readOnly: true
          - mountPath: /init-secrets
            name: init-runner-secrets
            readOnly: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65533
          runAsUser: 100
        serviceAccount: runner-gitlab-runner
        serviceAccountName: runner-gitlab-runner
        terminationGracePeriodSeconds: 3600
        volumes:
        - emptyDir:
            medium: Memory
          name: runner-secrets
        - emptyDir:
            medium: Memory
          name: etc-gitlab-runner
        - name: init-runner-secrets
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: runner-registration-token
                  path: runner-registration-token
                - key: runner-token
                  path: runner-token
                name: runner-gitlab-runner
        - configMap:
            defaultMode: 420
            name: runner-gitlab-runner
          name: scripts
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-11-17T10:01:18Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      pod-template-hash: 5dbd9649d4
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dd00d677-9090-4454-9037-3c565e3ae51a"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app.kubernetes.io/component: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/name: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"controller"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"LD_PRELOAD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/usr/local/certificates/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"webhook-cert"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-17T10:01:42Z"
    name: ingress-nginx-controller-5dbd9649d4
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: dd00d677-9090-4454-9037-3c565e3ae51a
    resourceVersion: "14487155"
    uid: 84154e2d-df41-458c-b6a7-f521a21da907
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 5dbd9649d4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          pod-template-hash: 5dbd9649d4
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --election-id=ingress-controller-leader
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: k8s.gcr.io/ingress-nginx/controller:v0.41.2@sha256:1f4f402b9c14f3ae92b11ada1dfe9893a88f0faeb0b2f4b903e2c67a0c3bf0de
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T06:11:54Z"
    generation: 1
    labels:
      app: grafana
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
      pod-template-hash: 784c89f4cf
    name: grafana-784c89f4cf
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: grafana
      uid: 96da3551-ed20-430c-81a1-f329469b4335
    resourceVersion: "27181463"
    uid: eb3d33bf-1479-46e7-a64a-b24279056a51
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
        pod-template-hash: 784c89f4cf
    template:
      metadata:
        annotations:
          checksum/config: d2485b1ee9f9be63381c231826a43742bb10ebac2964bdc3f22a100eab9d032c
          checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
          checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: grafana
          app.kubernetes.io/instance: grafana
          app.kubernetes.io/name: grafana
          pod-template-hash: 784c89f4cf
      spec:
        containers:
        - env:
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: Admin
          - name: GF_AUTH_BASIC_ENABLED
            value: "false"
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: '-'
          - name: GF_SECURITY_ADMIN_USER
            value: '-'
          image: grafana/grafana:7.2.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 3000
            name: service
            protocol: TCP
          - containerPort: 3000
            name: grafana
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
          - mountPath: /var/lib/grafana/dashboards/istio
            name: dashboards-istio
          - mountPath: /var/lib/grafana/dashboards/istio-services
            name: dashboards-istio-services
          - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
            name: config
            subPath: datasources.yaml
          - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
            name: config
            subPath: dashboardproviders.yaml
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsUser: 472
        serviceAccount: grafana
        serviceAccountName: grafana
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: grafana
          name: config
        - configMap:
            defaultMode: 420
            name: istio-grafana-dashboards
          name: dashboards-istio
        - configMap:
            defaultMode: 420
            name: istio-services-grafana-dashboards
          name: dashboards-istio-services
        - emptyDir: {}
          name: storage
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T02:25:28Z"
    generation: 1
    labels:
      app: istio-egressgateway
      chart: gateways
      heritage: Tiller
      install.operator.istio.io/owning-resource: unknown
      istio: egressgateway
      istio.io/rev: default
      operator.istio.io/component: EgressGateways
      pod-template-hash: d84f95b69
      release: istio
      service.istio.io/canonical-name: istio-egressgateway
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:heritage: {}
            f:install.operator.istio.io/owning-resource: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:pod-template-hash: {}
            f:release: {}
            f:service.istio.io/canonical-name: {}
            f:service.istio.io/canonical-revision: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"cfffdf17-ee19-4de8-a79e-31c1ee8b6fc4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:istio: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/path: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:heritage: {}
                f:install.operator.istio.io/owning-resource: {}
                f:istio: {}
                f:istio.io/rev: {}
                f:operator.istio.io/component: {}
                f:pod-template-hash: {}
                f:release: {}
                f:service.istio.io/canonical-name: {}
                f:service.istio.io/canonical-revision: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution:
                    .: {}
                    f:nodeSelectorTerms: {}
              f:containers:
                k:{"name":"istio-proxy"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"CA_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CANONICAL_REVISION"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"CANONICAL_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"HOST_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"INSTANCE_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"ISTIO_META_CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_OWNER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_ROUTER_MODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_WORKLOAD_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JWT_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PILOT_CERT_PROVIDER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":15443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:privileged: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/istio/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/egressgateway-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/egressgateway-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/pod"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/istio/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/ingress_gateway"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/secrets/istio"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
                k:{"name":"egressgateway-ca-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"egressgateway-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"gatewaysdsudspath"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istio-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istio-envoy"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istiod-ca-cert"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"podinfo"}:
                  .: {}
                  f:downwardAPI:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:48Z"
    name: istio-egressgateway-d84f95b69
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: istio-egressgateway
      uid: cfffdf17-ee19-4de8-a79e-31c1ee8b6fc4
    resourceVersion: "26875080"
    uid: bb6d5902-18e2-473e-b918-a579aa1b7b34
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: istio-egressgateway
        istio: egressgateway
        pod-template-hash: d84f95b69
    template:
      metadata:
        annotations:
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: istio-egressgateway
          chart: gateways
          heritage: Tiller
          install.operator.istio.io/owning-resource: unknown
          istio: egressgateway
          istio.io/rev: default
          operator.istio.io/component: EgressGateways
          pod-template-hash: d84f95b69
          release: istio
          service.istio.io/canonical-name: istio-egressgateway
          service.istio.io/canonical-revision: latest
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - ppc64le
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - s390x
              weight: 2
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - ppc64le
                  - s390x
        containers:
        - args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --serviceCluster
          - istio-egressgateway
          env:
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: CANONICAL_SERVICE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-name']
          - name: CANONICAL_REVISION
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-revision']
          - name: ISTIO_META_WORKLOAD_NAME
            value: istio-egressgateway
          - name: ISTIO_META_OWNER
            value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-egressgateway
          - name: ISTIO_META_ROUTER_MODE
            value: standard
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          image: docker.io/istio/proxyv2:1.8.1
          imagePullPolicy: IfNotPresent
          name: istio-proxy
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 15443
            protocol: TCP
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 40Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /etc/istio/config
            name: config-volume
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/run/ingress_gateway
            name: gatewaysdsudspath
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/pod
            name: podinfo
          - mountPath: /etc/istio/egressgateway-certs
            name: egressgateway-certs
            readOnly: true
          - mountPath: /etc/istio/egressgateway-ca-certs
            name: egressgateway-ca-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
          runAsGroup: 1337
          runAsNonRoot: true
          runAsUser: 1337
        serviceAccount: istio-egressgateway-service-account
        serviceAccountName: istio-egressgateway-service-account
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - downwardAPI:
            defaultMode: 420
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
          name: podinfo
        - emptyDir: {}
          name: istio-envoy
        - emptyDir: {}
          name: gatewaysdsudspath
        - emptyDir: {}
          name: istio-data
        - configMap:
            defaultMode: 420
            name: istio
            optional: true
          name: config-volume
        - name: egressgateway-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-egressgateway-certs
        - name: egressgateway-ca-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-egressgateway-ca-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T02:25:28Z"
    generation: 1
    labels:
      app: istio-ingressgateway
      chart: gateways
      heritage: Tiller
      install.operator.istio.io/owning-resource: unknown
      istio: ingressgateway
      istio.io/rev: default
      operator.istio.io/component: IngressGateways
      pod-template-hash: 75f6d79f48
      release: istio
      service.istio.io/canonical-name: istio-ingressgateway
      service.istio.io/canonical-revision: latest
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:heritage: {}
            f:install.operator.istio.io/owning-resource: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:pod-template-hash: {}
            f:release: {}
            f:service.istio.io/canonical-name: {}
            f:service.istio.io/canonical-revision: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"11aa639e-00ed-46be-a950-bfeee647f549"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:istio: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/path: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:heritage: {}
                f:install.operator.istio.io/owning-resource: {}
                f:istio: {}
                f:istio.io/rev: {}
                f:operator.istio.io/component: {}
                f:pod-template-hash: {}
                f:release: {}
                f:service.istio.io/canonical-name: {}
                f:service.istio.io/canonical-revision: {}
            f:spec:
              f:affinity:
                .: {}
                f:nodeAffinity:
                  .: {}
                  f:preferredDuringSchedulingIgnoredDuringExecution: {}
                  f:requiredDuringSchedulingIgnoredDuringExecution:
                    .: {}
                    f:nodeSelectorTerms: {}
              f:containers:
                k:{"name":"istio-proxy"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"CA_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CANONICAL_REVISION"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"CANONICAL_SERVICE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"HOST_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"INSTANCE_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"ISTIO_META_CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_OWNER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_ROUTER_MODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIO_META_WORKLOAD_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JWT_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"PILOT_CERT_PROVIDER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15021,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":15443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":31400,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:privileged: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/istio/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/ingressgateway-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/ingressgateway-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/pod"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/istio/proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/istio/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/ingress_gateway"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/secrets/istio"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                    f:optional: {}
                  f:name: {}
                k:{"name":"gatewaysdsudspath"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"ingressgateway-ca-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"ingressgateway-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"istio-data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istio-envoy"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"istiod-ca-cert"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"podinfo"}:
                  .: {}
                  f:downwardAPI:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:47Z"
    name: istio-ingressgateway-75f6d79f48
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: istio-ingressgateway
      uid: 11aa639e-00ed-46be-a950-bfeee647f549
    resourceVersion: "26875072"
    uid: b76b8b55-1b1b-4d7d-b22d-78c0c10a133b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: istio-ingressgateway
        istio: ingressgateway
        pod-template-hash: 75f6d79f48
    template:
      metadata:
        annotations:
          prometheus.io/path: /stats/prometheus
          prometheus.io/port: "15020"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: istio-ingressgateway
          chart: gateways
          heritage: Tiller
          install.operator.istio.io/owning-resource: unknown
          istio: ingressgateway
          istio.io/rev: default
          operator.istio.io/component: IngressGateways
          pod-template-hash: 75f6d79f48
          release: istio
          service.istio.io/canonical-name: istio-ingressgateway
          service.istio.io/canonical-revision: latest
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - ppc64le
              weight: 2
            - preference:
                matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - s390x
              weight: 2
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - ppc64le
                  - s390x
        containers:
        - args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --proxyLogLevel=warning
          - --proxyComponentLogLevel=misc:error
          - --log_output_level=default:info
          - --serviceCluster
          - istio-ingressgateway
          env:
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: CA_ADDR
            value: istiod.istio-system.svc:15012
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: CANONICAL_SERVICE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-name']
          - name: CANONICAL_REVISION
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['service.istio.io/canonical-revision']
          - name: ISTIO_META_WORKLOAD_NAME
            value: istio-ingressgateway
          - name: ISTIO_META_OWNER
            value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-ingressgateway
          - name: ISTIO_META_ROUTER_MODE
            value: standard
          - name: ISTIO_META_CLUSTER_ID
            value: Kubernetes
          image: docker.io/istio/proxyv2:1.8.1
          imagePullPolicy: IfNotPresent
          name: istio-proxy
          ports:
          - containerPort: 15021
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 31400
            protocol: TCP
          - containerPort: 15443
            protocol: TCP
          - containerPort: 15090
            name: http-envoy-prom
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15021
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 40Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/istio/proxy
            name: istio-envoy
          - mountPath: /etc/istio/config
            name: config-volume
          - mountPath: /var/run/secrets/istio
            name: istiod-ca-cert
          - mountPath: /var/run/ingress_gateway
            name: gatewaysdsudspath
          - mountPath: /var/lib/istio/data
            name: istio-data
          - mountPath: /etc/istio/pod
            name: podinfo
          - mountPath: /etc/istio/ingressgateway-certs
            name: ingressgateway-certs
            readOnly: true
          - mountPath: /etc/istio/ingressgateway-ca-certs
            name: ingressgateway-ca-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
          runAsGroup: 1337
          runAsNonRoot: true
          runAsUser: 1337
        serviceAccount: istio-ingressgateway-service-account
        serviceAccountName: istio-ingressgateway-service-account
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: istio-ca-root-cert
          name: istiod-ca-cert
        - downwardAPI:
            defaultMode: 420
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
          name: podinfo
        - emptyDir: {}
          name: istio-envoy
        - emptyDir: {}
          name: gatewaysdsudspath
        - emptyDir: {}
          name: istio-data
        - configMap:
            defaultMode: 420
            name: istio
            optional: true
          name: config-volume
        - name: ingressgateway-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-ingressgateway-certs
        - name: ingressgateway-ca-certs
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-ingressgateway-ca-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T02:25:01Z"
    generation: 1
    labels:
      app: istiod
      install.operator.istio.io/owning-resource: unknown
      istio: pilot
      istio.io/rev: default
      operator.istio.io/component: Pilot
      pod-template-hash: c9f6864c4
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:install.operator.istio.io/owning-resource: {}
            f:istio: {}
            f:istio.io/rev: {}
            f:operator.istio.io/component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f47210c4-f77c-41ef-8b36-cc0ea2fd00a5"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:istio: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:install.operator.istio.io/owning-resource: {}
                f:istio: {}
                f:istio.io/rev: {}
                f:operator.istio.io/component: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"discovery"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"CENTRAL_ISTIOD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CLUSTER_ID"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ENABLE_LEGACY_FSGROUP_INJECTION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"EXTERNAL_ISTIOD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"INJECTION_WEBHOOK_CONFIG_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ISTIOD_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"JWT_POLICY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBECONFIG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_CERT_PROVIDER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENABLE_ANALYSIS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_ENDPOINT_TELEMETRY_LABEL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PILOT_TRACE_SAMPLING"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"REVISION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SERVICE_ACCOUNT"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15010,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15017,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                    k:{"containerPort":15053,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:runAsGroup: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/cacerts"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/istio/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/istio/inject"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/run/secrets/istio-dns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/secrets/remote"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"cacerts"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"inject"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"istio-kubeconfig"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"local-certs"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T02:25:26Z"
    name: istiod-c9f6864c4
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: istiod
      uid: f47210c4-f77c-41ef-8b36-cc0ea2fd00a5
    resourceVersion: "26874926"
    uid: 95567e1a-47ae-4e36-95e9-b1fb451c1fb5
  spec:
    replicas: 1
    selector:
      matchLabels:
        istio: pilot
        pod-template-hash: c9f6864c4
    template:
      metadata:
        annotations:
          prometheus.io/port: "15014"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: istiod
          install.operator.istio.io/owning-resource: unknown
          istio: pilot
          istio.io/rev: default
          operator.istio.io/component: Pilot
          pod-template-hash: c9f6864c4
      spec:
        containers:
        - args:
          - discovery
          - --monitoringAddr=:15014
          - --log_output_level=default:info
          - --domain
          - cluster.local
          - --keepaliveMaxServerConnectionAge
          - 30m
          env:
          - name: REVISION
            value: default
          - name: JWT_POLICY
            value: first-party-jwt
          - name: PILOT_CERT_PROVIDER
            value: istiod
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: KUBECONFIG
            value: /var/run/secrets/remote/config
          - name: ENABLE_LEGACY_FSGROUP_INJECTION
            value: "false"
          - name: PILOT_TRACE_SAMPLING
            value: "100"
          - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_OUTBOUND
            value: "true"
          - name: PILOT_ENABLE_PROTOCOL_SNIFFING_FOR_INBOUND
            value: "true"
          - name: INJECTION_WEBHOOK_CONFIG_NAME
            value: istio-sidecar-injector
          - name: ISTIOD_ADDR
            value: istiod.istio-system.svc:15012
          - name: PILOT_ENABLE_ANALYSIS
            value: "false"
          - name: CLUSTER_ID
            value: Kubernetes
          - name: EXTERNAL_ISTIOD
            value: "false"
          - name: CENTRAL_ISTIOD
            value: "false"
          - name: PILOT_ENDPOINT_TELEMETRY_LABEL
            value: "true"
          image: docker.io/istio/pilot:1.8.1
          imagePullPolicy: IfNotPresent
          name: discovery
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 15010
            protocol: TCP
          - containerPort: 15017
            protocol: TCP
          - containerPort: 15053
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 100Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 1337
            runAsNonRoot: true
            runAsUser: 1337
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/istio/config
            name: config-volume
          - mountPath: /var/run/secrets/istio-dns
            name: local-certs
          - mountPath: /etc/cacerts
            name: cacerts
            readOnly: true
          - mountPath: /var/run/secrets/remote
            name: istio-kubeconfig
            readOnly: true
          - mountPath: /var/lib/istio/inject
            name: inject
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: istiod-service-account
        serviceAccountName: istiod-service-account
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            medium: Memory
          name: local-certs
        - name: cacerts
          secret:
            defaultMode: 420
            optional: true
            secretName: cacerts
        - name: istio-kubeconfig
          secret:
            defaultMode: 420
            optional: true
            secretName: istio-kubeconfig
        - configMap:
            defaultMode: 420
            name: istio-sidecar-injector
          name: inject
        - configMap:
            defaultMode: 420
            name: istio
          name: config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T06:11:55Z"
    generation: 1
    labels:
      app: jaeger
      pod-template-hash: 7f78b6fb65
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6c410006-9ccb-4003-955e-57ed80ad9399"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"jaeger"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"BADGER_DIRECTORY_KEY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"BADGER_DIRECTORY_VALUE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"BADGER_EPHEMERAL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"COLLECTOR_ZIPKIN_HTTP_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MEMORY_MAX_TRACES"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"QUERY_BASE_PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SPAN_STORAGE_TYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/badger"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T07:19:59Z"
    name: jaeger-7f78b6fb65
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: jaeger
      uid: 6c410006-9ccb-4003-955e-57ed80ad9399
    resourceVersion: "27181403"
    uid: 1672e584-3007-4079-8012-6f5fdc04d500
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: jaeger
        pod-template-hash: 7f78b6fb65
    template:
      metadata:
        annotations:
          prometheus.io/port: "14269"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: jaeger
          pod-template-hash: 7f78b6fb65
      spec:
        containers:
        - env:
          - name: BADGER_EPHEMERAL
            value: "false"
          - name: SPAN_STORAGE_TYPE
            value: badger
          - name: BADGER_DIRECTORY_VALUE
            value: /badger/data
          - name: BADGER_DIRECTORY_KEY
            value: /badger/key
          - name: COLLECTOR_ZIPKIN_HTTP_PORT
            value: "9411"
          - name: MEMORY_MAX_TRACES
            value: "50000"
          - name: QUERY_BASE_PATH
            value: /jaeger
          image: docker.io/jaegertracing/all-in-one:1.20
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: jaeger
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14269
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /badger
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T06:11:55Z"
    generation: 1
    labels:
      app: kiali
      app.kubernetes.io/instance: kiali-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kiali
      app.kubernetes.io/version: v1.26.0
      helm.sh/chart: kiali-server-1.26.0
      pod-template-hash: 7476977cf9
      version: v1.26.0
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
            f:pod-template-hash: {}
            f:version: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2a8101c1-cd58-431f-ac18-90ccc04cf375"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:kiali.io/runtimes: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
                f:pod-template-hash: {}
                f:version: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"kiali"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ACTIVE_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":20001,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/kiali-cert"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/kiali-configuration"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/kiali-secret"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"kiali-cert"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"kiali-configuration"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"kiali-secret"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:42Z"
    name: kiali-7476977cf9
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kiali
      uid: 2a8101c1-cd58-431f-ac18-90ccc04cf375
    resourceVersion: "27206482"
    uid: 32d20567-f3e4-4649-9ca8-88a623b90bd3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: kiali-server
        app.kubernetes.io/name: kiali
        pod-template-hash: 7476977cf9
    template:
      metadata:
        annotations:
          kiali.io/runtimes: go,kiali
          prometheus.io/port: "9090"
          prometheus.io/scrape: "true"
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: kiali
          app.kubernetes.io/instance: kiali-server
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kiali
          app.kubernetes.io/version: v1.26.0
          helm.sh/chart: kiali-server-1.26.0
          pod-template-hash: 7476977cf9
          version: v1.26.0
        name: kiali
      spec:
        containers:
        - command:
          - /opt/kiali/kiali
          - -config
          - /kiali-configuration/config.yaml
          - -v
          - "3"
          env:
          - name: ACTIVE_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/kiali/kiali:v1.26
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /kiali/healthz
              port: api-port
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: kiali
          ports:
          - containerPort: 20001
            name: api-port
            protocol: TCP
          - containerPort: 9090
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /kiali/healthz
              port: api-port
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kiali-configuration
            name: kiali-configuration
          - mountPath: /kiali-cert
            name: kiali-cert
          - mountPath: /kiali-secret
            name: kiali-secret
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kiali
        serviceAccountName: kiali
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: kiali
          name: kiali-configuration
        - name: kiali-cert
          secret:
            defaultMode: 420
            optional: true
            secretName: istio.kiali-service-account
        - name: kiali-secret
          secret:
            defaultMode: 420
            optional: true
            secretName: kiali
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-13T06:11:57Z"
    generation: 1
    labels:
      app: prometheus
      chart: prometheus-11.16.2
      component: server
      heritage: Helm
      pod-template-hash: 7bfddb8dbf
      release: prometheus
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:pod-template-hash: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"741daec9-40c3-4f4a-8511-7c2fc3351239"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:pod-template-hash: {}
              f:release: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:sidecar.istio.io/inject: {}
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:pod-template-hash: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-server-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-13T06:12:22Z"
    name: prometheus-7bfddb8dbf
    namespace: istio-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: prometheus
      uid: 741daec9-40c3-4f4a-8511-7c2fc3351239
    resourceVersion: "26915567"
    uid: 5f31ad87-a30b-4b7a-b268-8f4927fa86d3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
        component: server
        pod-template-hash: 7bfddb8dbf
        release: prometheus
    template:
      metadata:
        annotations:
          sidecar.istio.io/inject: "false"
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.16.2
          component: server
          heritage: Helm
          pod-template-hash: 7bfddb8dbf
          release: prometheus
      spec:
        containers:
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9090/-/reload
          image: jimmidyson/configmap-reload:v0.4.0
          imagePullPolicy: IfNotPresent
          name: prometheus-server-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          image: prom/prometheus:v2.21.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 30
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus
        serviceAccountName: prometheus
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus
          name: config-volume
        - emptyDir: {}
          name: storage-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-01-14T09:29:46Z"
    generation: 2
    labels:
      k8s-app: kube-dns
      pod-template-hash: 74ff55c5b
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c11218d9-74a3-4cdd-8f59-87c8d1732c6f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:20Z"
    name: coredns-74ff55c5b
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: c11218d9-74a3-4cdd-8f59-87c8d1732c6f
    resourceVersion: "27206401"
    uid: 398f5b58-0046-4382-a0cd-872e874ba60c
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: 74ff55c5b
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: 74ff55c5b
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-09-08T07:35:43Z"
    generation: 3
    labels:
      k8s-app: kube-dns
      pod-template-hash: f9fd979d6
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c11218d9-74a3-4cdd-8f59-87c8d1732c6f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:29:56Z"
    name: coredns-f9fd979d6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: c11218d9-74a3-4cdd-8f59-87c8d1732c6f
    resourceVersion: "27204308"
    uid: 57dec3ef-b2ba-4dcc-9138-d7e08ed3f8c3
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: f9fd979d6
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: f9fd979d6
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-09-17T06:12:17Z"
    generation: 2
    labels:
      k8s-app: metrics-server
      pod-template-hash: 68b849498d
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7c9321bb-81d7-4dbb-9253-0df18ecf5b97"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-dir"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-09-18T02:14:01Z"
    name: metrics-server-68b849498d
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: 7c9321bb-81d7-4dbb-9253-0df18ecf5b97
    resourceVersion: "2020213"
    uid: 2b454d53-9c7b-4bb5-a43a-2db1830181cd
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 68b849498d
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 68b849498d
        name: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 4443
            name: main-port
            protocol: TCP
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2020-09-18T02:13:53Z"
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: 75f98fdbd5
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7c9321bb-81d7-4dbb-9253-0df18ecf5b97"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-dir"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:42:20Z"
    name: metrics-server-75f98fdbd5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: 7c9321bb-81d7-4dbb-9253-0df18ecf5b97
    resourceVersion: "27206332"
    uid: 2b3b8dfd-afcd-44e5-b8fb-44bba17a5a00
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 75f98fdbd5
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 75f98fdbd5
        name: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-insecure-tls
          - --kubelet-preferred-address-types=InternalIP
          image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 4443
            name: main-port
            protocol: TCP
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-12T04:21:10Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 79c5968bdc
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"77a7da6d-efbd-414e-a90b-35b402fea1bf"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:seccomp.security.alpha.kubernetes.io/pod: {}
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"dashboard-metrics-scraper"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-12T04:21:12Z"
    name: dashboard-metrics-scraper-79c5968bdc
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dashboard-metrics-scraper
      uid: 77a7da6d-efbd-414e-a90b-35b402fea1bf
    resourceVersion: "26673305"
    uid: d396216f-2ebf-40f5-8fec-ab05be59b7a9
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
        pod-template-hash: 79c5968bdc
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
          pod-template-hash: 79c5968bdc
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-01-12T04:21:09Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: 7448ffc97b
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b87ecdab-4a59-48bc-b343-330fed64b012"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"kubernetes-dashboard"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubernetes-dashboard-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-01-14T09:18:06Z"
    name: kubernetes-dashboard-7448ffc97b
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard
      uid: b87ecdab-4a59-48bc-b343-330fed64b012
    resourceVersion: "27202048"
    uid: 5aed12e3-c043-4a92-9ab5-3e3d55dd6791
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
        pod-template-hash: 7448ffc97b
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
          pod-template-hash: 7448ffc97b
      spec:
        containers:
        - args:
          - --auto-generate-certificates
          - --namespace=kubernetes-dashboard
          image: kubernetesui/dashboard:v2.1.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      helm.sh/hook: pre-install,pre-upgrade
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{"helm.sh/hook":"pre-install,pre-upgrade","helm.sh/hook-delete-policy":"before-hook-creation,hook-succeeded"},"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/version":"0.41.2","helm.sh/chart":"ingress-nginx-3.10.1"},"name":"ingress-nginx-admission-create","namespace":"ingress-nginx"},"spec":{"template":{"metadata":{"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/version":"0.41.2","helm.sh/chart":"ingress-nginx-3.10.1"},"name":"ingress-nginx-admission-create"},"spec":{"containers":[{"args":["create","--host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc","--namespace=$(POD_NAMESPACE)","--secret-name=ingress-nginx-admission"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/jettech/kube-webhook-certgen:v1.5.0","imagePullPolicy":"IfNotPresent","name":"create"}],"restartPolicy":"OnFailure","securityContext":{"runAsNonRoot":true,"runAsUser":2000},"serviceAccountName":"ingress-nginx-admission"}}}}
    creationTimestamp: "2020-11-17T10:01:18Z"
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/version: 0.41.2
      helm.sh/chart: ingress-nginx-3.10.1
    managedFields:
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:helm.sh/hook: {}
            f:helm.sh/hook-delete-policy: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
        f:spec:
          f:backoffLimit: {}
          f:completions: {}
          f:parallelism: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"create"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-11-17T10:01:18Z"
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:completionTime: {}
          f:conditions:
            .: {}
            k:{"type":"Complete"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:startTime: {}
          f:succeeded: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-17T10:01:21Z"
    name: ingress-nginx-admission-create
    namespace: ingress-nginx
    resourceVersion: "14487081"
    uid: af1e20a2-7c20-4ea0-b0ce-44cceb7943e9
  spec:
    backoffLimit: 6
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: af1e20a2-7c20-4ea0-b0ce-44cceb7943e9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: admission-webhook
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/version: 0.41.2
          controller-uid: af1e20a2-7c20-4ea0-b0ce-44cceb7943e9
          helm.sh/chart: ingress-nginx-3.10.1
          job-name: ingress-nginx-admission-create
        name: ingress-nginx-admission-create
      spec:
        containers:
        - args:
          - create
          - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
          - --namespace=$(POD_NAMESPACE)
          - --secret-name=ingress-nginx-admission
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/jettech/kube-webhook-certgen:v1.5.0
          imagePullPolicy: IfNotPresent
          name: create
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 2000
        serviceAccount: ingress-nginx-admission
        serviceAccountName: ingress-nginx-admission
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2020-11-17T10:01:21Z"
    conditions:
    - lastProbeTime: "2020-11-17T10:01:21Z"
      lastTransitionTime: "2020-11-17T10:01:21Z"
      status: "True"
      type: Complete
    startTime: "2020-11-17T10:01:18Z"
    succeeded: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{"helm.sh/hook":"post-install,post-upgrade","helm.sh/hook-delete-policy":"before-hook-creation,hook-succeeded"},"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/version":"0.41.2","helm.sh/chart":"ingress-nginx-3.10.1"},"name":"ingress-nginx-admission-patch","namespace":"ingress-nginx"},"spec":{"template":{"metadata":{"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/version":"0.41.2","helm.sh/chart":"ingress-nginx-3.10.1"},"name":"ingress-nginx-admission-patch"},"spec":{"containers":[{"args":["patch","--webhook-name=ingress-nginx-admission","--namespace=$(POD_NAMESPACE)","--patch-mutating=false","--secret-name=ingress-nginx-admission","--patch-failure-policy=Fail"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/jettech/kube-webhook-certgen:v1.5.0","imagePullPolicy":"IfNotPresent","name":"patch"}],"restartPolicy":"OnFailure","securityContext":{"runAsNonRoot":true,"runAsUser":2000},"serviceAccountName":"ingress-nginx-admission"}}}}
    creationTimestamp: "2020-11-17T10:01:19Z"
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/version: 0.41.2
      helm.sh/chart: ingress-nginx-3.10.1
    managedFields:
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:helm.sh/hook: {}
            f:helm.sh/hook-delete-policy: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
        f:spec:
          f:backoffLimit: {}
          f:completions: {}
          f:parallelism: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app.kubernetes.io/component: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/version: {}
                f:helm.sh/chart: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"patch"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-11-17T10:01:19Z"
    - apiVersion: batch/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:completionTime: {}
          f:conditions:
            .: {}
            k:{"type":"Complete"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:startTime: {}
          f:succeeded: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-17T10:01:22Z"
    name: ingress-nginx-admission-patch
    namespace: ingress-nginx
    resourceVersion: "14487087"
    uid: bf3db82a-409c-446e-9b59-8e6c3135c5cb
  spec:
    backoffLimit: 6
    completions: 1
    parallelism: 1
    selector:
      matchLabels:
        controller-uid: bf3db82a-409c-446e-9b59-8e6c3135c5cb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: admission-webhook
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/version: 0.41.2
          controller-uid: bf3db82a-409c-446e-9b59-8e6c3135c5cb
          helm.sh/chart: ingress-nginx-3.10.1
          job-name: ingress-nginx-admission-patch
        name: ingress-nginx-admission-patch
      spec:
        containers:
        - args:
          - patch
          - --webhook-name=ingress-nginx-admission
          - --namespace=$(POD_NAMESPACE)
          - --patch-mutating=false
          - --secret-name=ingress-nginx-admission
          - --patch-failure-policy=Fail
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/jettech/kube-webhook-certgen:v1.5.0
          imagePullPolicy: IfNotPresent
          name: patch
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 2000
        serviceAccount: ingress-nginx-admission
        serviceAccountName: ingress-nginx-admission
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2020-11-17T10:01:22Z"
    conditions:
    - lastProbeTime: "2020-11-17T10:01:22Z"
      lastTransitionTime: "2020-11-17T10:01:22Z"
      status: "True"
      type: Complete
    startTime: "2020-11-17T10:01:19Z"
    succeeded: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
